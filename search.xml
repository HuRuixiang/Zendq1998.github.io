<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Rax-入门]]></title>
    <url>%2F2018%2F03%2F18%2F</url>
    <content type="text"><![CDATA[初步了解 Weex是什么 官方描述：一个构建移动端跨平台（Web/IOS/Android）UI框架。 Weex官网 Rax是什么 官方描述：一个通用的跨容器（Browser/Native/Node）的渲染引擎 Rax官网 工具安装创建和管理一个Rax apps，你得安装：Node.js, Rax CLI 和 Weex Playground App. node：版本号至少为4.0 Weex Playground App : Weex Native 运行时实例 &amp; Weex 文件预览工具，这里下载。 Rax CLI：Rax提供的脚手架工具，在终端执行如下命令安装：1$ npm install -g rax-cli 开始第一个项目创建一个名为hello-world的文件夹，利用Rax CLI工具创建一个新的application，安装需要的依赖。12345678910111213141516rax init hello-worldCreating a new Rax project in /Users/anonymous/hello-worldInstall dependencies:...To run your app: cd hello-world npm run start```$ cd hello-world/Users/anonymous/hello-world|-- README.md|-- node_modules|-- package.json|-- public|-- src`-- webpack.config.js改变路径到你的新项目 跑rax init之后，会自动在项目路径当中创建一系列文件： src/index.js 是Rax app的入口。 package.json定义了项目所需要的各种模块，它告诉npm如何安装外部依赖，比如rax和rax-component库。 使用npm run start命令开启本地预览，终端会显示两个二维码，通过weex playground app扫描第二个可以访问该地址。 Hello World1234567891011121314151617181920212223242526272829//顶层APIimport &#123;createElement, Component&#125; from 'rax';//元件引用import View from 'rax-view';import Text from 'rax-text';//import &#123;View, Text&#125; from 'rax-components';//rax-components需要自行安装//引用样式import styles from './App.css';//定义组件class App extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.app&#125;&gt; &lt;View style=&#123;styles.appHeader&#125;&gt; &lt;Text style=&#123;styles.appBanner&#125;&gt;Welcome to Rax&lt;/Text&gt; &lt;/View&gt; &lt;Text style=&#123;styles.appIntro&#125;&gt; To get started, edit src/App.js and save to reload. &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;//渲染export default App; 参考资料Rax Github]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Rax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于理解Webpack(1)-ES6模块化]]></title>
    <url>%2F2018%2F03%2F15%2F</url>
    <content type="text"><![CDATA[Webpack简介Webpack是一个打包模块化JavaScript工具，在Webpack里一切文件皆模块，通过Loader转换文件，通过Plugin注入钩子，最后输出由多个模块组合成的文件。 Modules in JavaScript 模块化是指将一个复杂的系统分解为多个模块以方便编码。当项目变大时，需要用模块化的思想来组织代码。 在ES6之前的ES5，对于模块化系统是没有明确的语言支持的，令人印象深刻的是有两种主要的模块化规范：CommonJS和AMD ES6模块化提出之后，逐渐取代之前的两种规范，因为它同时具有CommonJS简练的语法（for single exports and support for cyclic dependencies）和AMD的可异步加载依赖。并且具有在语法上比CommonJS更简练、更支持循环依赖等优点。 The basics of ES6 modulesexport的具体用法参照这里，其实就两种export：named exports (several per module) and default exports (one per module)，从一个模块里可以有多个不同命名的exports输出，但是只有一个default export。 Named export (several per module)一个模块输出多个exports12345678910111213//------ lib.js ------export const sqrt = Math.sqrt;export function square(x) &#123; return x * x;&#125;export function diag(x, y) &#123; return sqrt(square(x) + square(y));&#125;//------ main.js ------import &#123; square, diag &#125; from 'lib';console.log(square(11)); // 121console.log(diag(4, 3)); // 5 符号*代表所有模块所以main.js也可以改成：1234//------- main.js -----import * as lib from 'lib';console.log(lib.square(11)); // 121console.log(lib.diag(4, 3)); // 5 Default exports (one per module)一个模块输出一个export，这样的模块里只有一个function或者class：12345678910111213//------ myFunc.js ------export default function () &#123;&#125; // no semicolon!//------ main1.js ------import myFunc from 'myFunc';myFunc();//------ MyClass.js ------export default class &#123;&#125; // no semicolon!//------ main2.js ------import MyClass from 'MyClass';const inst = new MyClass(); 要注意:export default…后面没有分号！ 主要有两种风格的export default： 1.元素声明（Labeling declarations） 2.直接输出值（Default-exporting values directly） 第一种风格：边声明边输出 123456export default function foo() &#123;&#125; // no semicolon!export default class Bar &#123;&#125; // no semicolon!//或者使用匿名函数export default function () &#123;&#125; // no semicolon!export default class &#123;&#125; // no semicolon! 第二种风格：直接输出值（这些值都是经由表达式产生）12345export default 'abc';export default foo();export default /^xyz$/;export default 5 * 7;export default &#123; no: false, yes: true &#125;; 12// 格式：export default «expression»; 必须在模块的最高作用域imports或者exportES6的模块是静态结构，你不能在if语句后面export或者import东西，否则会报错，所以你必须在一个模块的最外层作用于使用export或者import。123456789if (Math.random()) &#123; import 'foo'; // SyntaxError&#125;// You can’t even nest `import` and `export`// inside a simple block:&#123; import 'foo'; // SyntaxError&#125; 如果你在{}内引用了import或者export，经测试,报错结果是”You can’t even nest import and export“ Support for cyclic dependencies如果模块A引入了模块B而且B也引入了A，那么就称这两个模块互相循环依赖]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>模块化</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未知宽高图片的水平垂直居中]]></title>
    <url>%2F2017%2F12%2F08%2F</url>
    <content type="text"><![CDATA[背景图片居中原理：使用一个透明的gif图片做覆盖层，高宽拉伸至所需要的大小，然后给这个gif图片一个background-position:center center的属性。而background-image建议写在页面上，因为实际项目中，这肯定是个动态的URL地址，css文件似乎不支持动态URL地址。 示例代码： 123456789101112131415161718192021222324252627282930&lt;html&gt; &lt;head&gt; &lt;style&gt;#box&#123; width:600px; height:600px; background: black; border:1px solid #d3d3d3;&#125;#box img &#123; background-repeat: no-repeat; background-position: center; background-attachment:fixed; width:100%; height:100%; border: 1px solid #d3d3d3;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="box"&gt; &lt;img src="img/pixel.png" alt="" style="background-image:url(img/panda.jpg);" /&gt; &lt;/div&gt; &lt;div id="box"&gt; &lt;img src="img/pixel.jif" alt="" style="background-image:url(img/Jackma.jpg);" /&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; pixel.gif和pixel.png都是300px*300px的透明图片。经过测试png和gif两种类型其实都可以，究竟哪种类型我觉得看需求，用png的话可以更好的支持半透明的效果。（个人观点）（注意这里一定得是透明的图片，因为它是覆盖在你要显示的图片上） 设置box的宽高都是600px，为了更好的显示加了一个背景颜色和边框。box底下的img给设了一个宽高100%，目的是把透明图片铺满box。 利用background-position中有个center属性。可以完美实现居中。别忘了background-repeat: no-repeat; background-position 属性设置背景图像的起始位置。 提示：需要把 background-attachment 属性设置为 “fixed”，才能保证该属性在 Firefox 和 Opera 中正常工作。 最终效果： 这样直接操作html中的url地址就可以不用考虑该图片的宽高实现水平垂直居中。 思考：12345678910/* 省略一部分 */#box div &#123; background-repeat: no-repeat; background-position: center ; width:100%; height:100%; border: 1px solid #d3d3d3;&#125;&lt;div style=&quot;background-image:url(img/panda.jpg);&quot; /&gt; 其实不用img搞一个透明图片覆盖也可以这样实现垂直水平居中的，用透明图层覆盖的话会便于维护一些。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[埃拉托斯特尼筛法]]></title>
    <url>%2F2017%2F11%2F26%2F</url>
    <content type="text"><![CDATA[简称埃氏筛，是一种简单且年代久远的筛法，用来找出一定范围内所有的素数。所使用的原理是从2开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列。此为这个筛法和试除法不同的关键之处，后者是以素数来测试每个待测数能否被整除。 算式给出要筛数值的范围n，找出 {\displaystyle {\sqrt {n}}} \sqrt{n}以内的素数 {\displaystyle p{1},p{2},\dots ,p{k}} p1,p2,\dots ,p。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个素数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个素数5筛，把5留下，把5的倍数剔除掉；不断重复下去……。 步骤找出25以内的所有素数，详细列出算法如下： 列出2以后的所有序列：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 标出序列中的第一个质数，也就是2，序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 将剩下序列中，划摽2的倍数（粗体），序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25如果现在这个序列中最大数小于最后一个标出的素数的平方，那么剩下的序列中所有的数都是质数，否则回到第二步。 本例中，因为25大于2的平方，我们返回第二步： 剩下的序列中第一个质数是3，将主序列中3的倍数划出，主序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25我们得到的质数有：2，3 25仍然大于3的平方，所以我们还要返回第二步： 现在序列中第一个质数是5，同样将序列中5的倍数划出，主序列成了：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25我们得到的质数有：2 3 5 。 因为25等于5的平方，跳出循环. 结论：去掉划出的数字，2到25之间的质数是：2 3 5 7 11 13 17 19 23。 图解 c++代码12345678910111213141516171819202122232425#include &lt;vector&gt;#include &lt;algorithm&gt;//std::remove_if#include &lt;numeric&gt;//std::iotastd::vector&lt;int&gt; eratosthenes(int max)&#123; std::vector&lt;int&gt; vi(max+1);//0, 1, 2, ..., max std::iota(vi.begin(), vi.end(), 0); if(max&gt;=2)&#123; int prime=2; while(prime*prime&lt;=max)&#123;//2 to sqrt(max) for(size_t index=prime*2; index&lt;vi.size(); index+=prime)&#123; vi[index]=0;//Rule out this number. &#125; for(prime++; prime*prime&lt;=max; prime++)&#123; if(vi[prime]&gt;0)&#123; break;//Jump to next non-zero. &#125; &#125; &#125; &#125; vi.erase(std::remove_if(vi.begin(), vi.end(), [](int i)-&gt;bool&#123; return i&lt;=1; &#125;), vi.end());//Remove all zeros and the one. return vi;&#125; 以上是来自维基百科的说法。 其实就是直接构造一个整型的数组，经过埃氏筛之后把合数置为0，对于一般占4个字节的int来说，每一个数不管素数还是合数都要占据4个字节的空间，但其实我是不需要合数的，当n很大的时候空间开销就会特别大。 另一种方法就是筛的时候遇到合数就将它删掉，这样最后数组内只剩下素数，看起来不错可以减少空间的开销，但是频繁地对一个大的容器进行删除操作可能会导致频繁的内存分配和释放，而频繁的内存分配/释放，会导致明显的 CPU 占用并可能造成内存碎片。 优化按布尔（bool）存储的思路。构造一个定长的布尔型容器（通常用数组）。比方说，质数的分布范围是1,000,000，那么就构造一个包含1,000,000个布尔值的数组。然后把所有元素都初始化为 true。在筛的过程中，一旦发现某个自然数是合数，就以该自然数为下标，把对应的布尔值改为 false。全部筛完之后，遍历数组，找到那些值为 true 的元素，把他们的下标打印出来即可。此种境界的好处在于：其一，由于容器是定长的，运算过程中避免了频繁的内存分配/释放；其二，在某些语言中，布尔型占用的空间比整型要小。比如 C++ 的 bool 仅用1字节 注：C++ 标准（ISO/IEC 14882）【没有】硬性规定 sizeof(bool)==1，但大多数编译器都实现为单字节。 继续优化按位（bit）存储的思路。以 C++ 为例。一个 bool 占用1字节内存。而1个字节有8个比特，每个比特可以表示0或1。所以，当你使用按位存储的方式，一个字节可以拿来当8个布尔型使用。所以，达到此境界的程序猿，会构造一个定长的 byte 数组，数组的每个 byte 存储8个布尔值。空间性能相比境界2，提高8倍（对于 C++ 而言）。如果某种语言使用4字节表示布尔型，那么境界3比境界2，空间利用率提高32倍。 当然，楼上的方法并不一定是最优的方法。欢迎各位挑刺。]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>素数</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据依赖之函数依赖和多值依赖]]></title>
    <url>%2F2017%2F10%2F23%2F</url>
    <content type="text"><![CDATA[数据依赖是一个关系内部属性与属性之间的一种约束关系。这种约束关系是通过属性间值的相等与否体现出来的数据间的相关联系。其中最重要的是函数依赖和多值依赖。 例1.函数依赖建立一个描述学校教务的数据库，该数据库涉及的对象包括学生的学号（Sno）、所在系（Sdept）、系主任姓名（Mname）、课程号（Cno）和成绩（Grade）。假设用一个单一的关系模式Student来表示，则该关系模式的属性集合为U={Sno,Sdept,Mname,Cno,Grade}现实世界的已知事实告诉我们：①一个系有若干学生，但一个学生只属于一个系。Sno-&gt;Sdept②一个系只有一名负责人。Sdept-&gt;Mname③一个学生可以选修多门课程，没门课程有若干学生选修。④每个学生学习每一门课程有一个成绩。{Sno,Cno}-&gt;Grade于是得到属性U上的椅子函数依赖F={Sno-&gt;Sdept,Sdept-&gt;Mname,{Sno,Cno}-&gt;Grade}。 但是这个关系模式存在以下问题：①数据冗余②更新异常③插入异常④删除异常 例二.完全函数依赖和部分函数依赖 U={Sno,Sdept,Mname,Cno,Grade} {Sno,Cno}-f-&gt;Grade是完全函数依赖。 {Sno,Cno}-p-&gt;Sdept是部分函数依赖，因为Sno-&gt;Sdept成立，而Sno是{Sno,Cno}的子集。 U =（员工码，姓名，出生日期，联系电话，学历，毕业学校，培训日期，培训内容） {员工码，培训日期}-f-&gt;U 是完全依赖函数 {员工码，培训日期}-p-&gt;{姓名，出生日期}是部分依赖函数，因为员工码-&gt;{姓名，出生日期}成立，而员工码是{姓名，出生日期}的子集 例三 传递函数依赖 U={Sno,Sdept,Mname,Cno,Grade} Sno-&gt;Sdept, Sdept-&gt;Mname成立，所以Sno-传递-&gt;Mname，系主任是传递依赖于学号的。还要加上条件Sdept-/-&gt;Sname,因为如果Sdept-&gt;Sname，则Sdept&lt;-&gt;Sname,实际上是Sno-直接-&gt;Mname，是直接函数依赖而不是传递函数依赖。 U={学号，姓名，年龄，班号，班长，课号，成绩} 学号-&gt;班号；班号-&gt;班长成立，又班号-/-&gt;学号，所以学号-传递-&gt;班长。 例四.2NF（第二范式）2NF：每一个非主属性完全依赖与候选码。有关系模式S-L-C(Sno，Sdept，Sloc，Cno，Ggrade)，其中Sloc为学生的住处，并且每个系的学生住在同一个地方。码为（Sno，Cno），则函数依赖有：（Sno，Cno）-P-&gt;Sdept, 因为Sno-&gt;Sdept，Sno是（Sno，Cno）的子集（Sno，Cno）-P-&gt;Sloc, 因为Sno-&gt;Sloc, Sno是（Sno，Cno）的子集（Sno，Cno）-F-&gt;Grade可以看到非主属性Sdept、Sloc并不完全依赖于码（Sno，Cno），因此关系模式S-L-C不符合2NF定义。一个关系模式R不属于2NF，会产生以下几个问题：①插入异常②修改异常③删除异常分析：上面的例子中，发现有两类非主属性，一类如Gdrade，它对码是完全函数依赖；另一类如Sdept、Sloc，他们对码是不完全依赖，解决的办法是用投影分解法把关系模式S-L-C分解为两个关系模式：SC(Sno，Cno，Ggrade)和SL(Sno，Sdept，Sloc)。 例五.3NF（第三范式）属于2NF的同时，每一个非主属性都不传递依赖于码在例四修改后的SL(Sno，Sdept，Sloc)中，由Sno-&gt;Sdept(Sdept-/-Sno),Sdept-&gt;Sloc可得，Sno-传递-&gt;Sloc,因此SL(Sno，Sdept，Sloc)不符合3NF。对SC(Sno，Cno，Ggrade)，非主属性是Ggrade，不传递依赖于码，所以符合3NF。 例六.BCNF通常认为BCNF是修正的第三范式，有时也称为扩充的第三范式：关系模式中，每一个决定因素都包含码。一个满足BCNF的关系模式有： 所有非主属性对每一个码都是完全函数依赖 所有主属性对每一个不包含他的码也是完全函数依赖 没有任何属性完全依赖于非码的任何一组属性 关系模式STJ(S,T,J)中，S表示学生，T表示教师，J表示课程。每一个教师只教一门课，每门课有若干教师，某学生选定某门课就对应一个固定的教师。由语义可得到如下的函数依赖。（S，J）-&gt;T , (S , T)-&gt;J , T-&gt;J因为候选码为（S，J） (S , T)，所以S J T都是主属性STJ是3NF，因为没有任何非主属性对码传递依赖或者部分依赖。但是STJ不是BCNF，因为T是决定因素但是不包含码，或者对主属性J来说，J对(S , T)是部分依赖，因为T-&gt;J，且T是 (S , T)的子集。 例七.多值依赖学校中某一门课由多个教师讲授，他们使用相同的一套参考书。每个教师可以讲授多门课程，每种参考书可以供多门课使用。关系模型Teaching（C，T，B）码是（C，T，B）即all-key，但是当某一个课程增加一名教师，必须插入多个元组，同样要删掉一本参考书，则必须删除多个元组，这样对数据的增删改很不方便，数据的冗余也很明显，发现他具有一种称为多值依赖的数据依赖，例如：在关系模式Teaching中，对于一个（物理，光学原理）有一组T值{李勇，王军}，这组值仅仅决定于课程C上的值（物理）。也就是说对于另一个（物理，普通物理学），它对应的一组仍是{王军，李勇}。因此T多值依赖于C，即C-&gt;-&gt;T。 又例如：关系模式WSC(W,S,C)中，W表示仓库，S表示保管员，C表示商品。假设每个仓库有若干保管员，有若干种商品。每个保管员保管所在仓库的所有商品，每种商品被所有保管员保管。按照语义，对于W的每一个值Wi，S有一个完整的集合与之对应而不问C取何值。所以W-&gt;-&gt;S。由于C与S具有完全对称性，必然有W-&gt;-&gt;C成立。 多值依赖的性质：1.具有对称性2.具有传递性3.函数依赖可以看作是多值依赖的特殊情况，这是因为当X-&gt;Y时，对X的每一个值x，Y都有一个确定的值y与之对应，所以X-&gt;-&gt;Y。 多值依赖和函数依赖相比有下面两个基本的区别：1.多值依赖的有效性与属性集的范围有关。2.若函数依赖X-&gt;Y在R(U)上成立，则对于任何Y’∈Y均有X-&gt;Y’成立。而多值依赖X-&gt;-&gt;Y若在R(U)上成立，却不能断言对于任何Y’∈Y有X-&gt;-&gt;Y’成立。 例八.4NF4NF就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。在前面的关系模式WSC(W,S,C)中，W-&gt;-&gt;S,W-&gt;-&gt;C，他们都是非平凡的多值依赖。W不是码，关系模式WSC(W,S,C)中的码是(W,S,C)，即all-key。因此WSC不满足4NF。 总结函数依赖和多值依赖是两种最重要的数据依赖，如果只考虑函数依赖，则属于BCNF的关系模式规范化程度已经是最高的了；如果考虑多值依赖，则属于4NF的关系模式规范化程度是最高的。事实上，除了函数依赖和多值依赖之外，还有其它数据依赖，例如连接依赖。函数依赖是多值依赖的一种特殊情况，而多值依赖又是连接依赖的一种特殊情况。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>规范化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自测练习之深入理解对象(2)]]></title>
    <url>%2F2017%2F10%2F19%2F</url>
    <content type="text"><![CDATA[Object.prototype.toString方法JavaScript对象原型的关系是一种树形结构，整个树形结构的根部就是Object.prototype。Object.prototype提供了一些可以在所有对象中使用的方法。比如说，toString方法可以将一个对象转换成其字符串表示形式，即返回反映这个对象的字符串。自测练习4123function foo(obj)&#123; return Object.prototype.toString.call(obj).slice(8,-1)&#125;//请说明函数foo的作用 对obj这个对象调用Object.prototype.toString，返回对象obj的具体类型（一对方括号，方括号中间是单词“object”和类型的名称），再对返回的[object ….]调用slice方法，切去前面的object和最后的’]’剩下一个代表obj的类型名称的字符串。foo的作用：检测参数的对象类型，返回代表类型名的字符串。比如： 1234567foo("jerry"); //"String"foo(123); //"Number"foo(true); //"Boolean"foo([1,2,3]); //"Array"foo(&#123;&#125;); //"Object"foo(null); //"Null"foo(); //"Undefined" PS:obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样,这是因为toString为Object的原型方法，而Array ，function等类型作为Object的实例，都重写（覆盖）了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的覆盖之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串（与调用join(“,”)的结果非常相似，即在数组的每个值之间插入一个逗号）…..），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object上原型toString方法。 我们可以验证一下，将数组的toString方法删除，看看会是什么结果： 123456var arr=[1,2,3];console.log(Array.prototype.hasOwnProperty("toString"));//trueconsole.log(arr.toString());//1,2,3delete Array.prototype.toString;//delete操作符删除实例属性console.log(Array.prototype.hasOwnProperty("toString"));//falseconsole.log(arr.toString());//"[object Array]" 删除了Array的toString方法后，同样再采用arr.toString()方法调用时，不再有屏蔽Object原型方法的实例方法，因此沿着原型链，arr最后调用了Object的toString方法，返回了和Object.prototype.toString.call(arr)相同的结果。 Object.defineProperty 方法定义对象可以使用构造函数或字面量的形式： 123var obj = new Object; //obj = &#123;&#125;obj.name = "张三" //添加描述obj.say = function()&#123;&#125;://添加行为 除了以上添加属性的方法，还可以使用Object.defineProperty定义新属性或修改原有的属性。 语法： 1Object.defineProperty(obj, prop, descriptor) 参数说明： obj：必需。目标对象 prop：必需。需要定义或修改属性的名字 descriptor：必需。目标属性所拥有的特性返回值： 传入函数的对象。即第一个参数obj 数据描述当修改或定义对象的某个属性的时候，给这个属性添加一些特性： 1234567891011121314151617var obj = &#123; test:"hello"&#125;//对象已有的属性添加特性描述Object.defineProperty(obj,"test",&#123; configurable:true | false, enumerable:true | false, value:任意类型的值, writable:true | false&#125;);//对象新添加的属性的特性描述Object.defineProperty(obj,"newKey",&#123; configurable:true | false, enumerable:true | false, value:任意类型的值, writable:true | false&#125;); 数据描述中的属性都是可选的，来看一下设置每一个属性的作用。 value属性对应的值,可以使任意类型的值，默认为undefined writable属性的值是否可以被重写。设置为true可以被重写；设置为false。不能被重写，默认值为false。 enumerable此属性的值是否可以被枚举（使用for…in或Object.keys()）。设置为true可以被枚举；设置为false，不能被枚举。默认为false。 configurable是否可以删除目标属性或者是否可以再次修改属性的特性（writable,configurable,enumerable）。设置为true可以被删除或可以重新设置特性；设置为false，属性想再改过来都不行。 回到开头，第一种给对象添加属性的方法，添加的属性是可删除、可枚举、可重写的。 第二种使用Object.definePropety给对象添加属性，如果不设置属性的特性，那么默认情况下，添加的属性是不可删除、不可枚举、不可重写的。具体Object.defineProperty 方法参考 自测练习5 123456789101112131415161718192021222324var a = &#123;&#125;a.bar = 2Object.defineProperty(a, "foo", &#123; value: "hi"&#125;);//为a添加名为foo的属性，值为"hi",没有设置属性的特性，所以这个属性是不可枚举、修改和重写的console.log(delete a.foo)//foo属性不可以被删除，故删除失败，输出falseconsole.log(delete a.bar)//a属性是直接添加的，可以删除，输出truea.foo = "world"console.log(a.foo)//foo属性是不可重写的，值不变，还是输出"hi"for (var key in a)&#123; console.log(key);&#125;//foo属性不可枚举，bar属性又被删除了，没有可以枚举的属性了，不输出console.log("foo" in a);//foo虽然不可枚举，但是还是存在对象a之中的，输出trueconsole.log("bar" in a);//bar属性已经被删除，不在对象a之中，输出false//请问console.log的输出？]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自测练习之深入理解对象(1)]]></title>
    <url>%2F2017%2F10%2F18%2F</url>
    <content type="text"><![CDATA[构造函数和对象原型有一种创建对象的方法，我们可以直接从一些公有原型中派生并构造对象，即用构造函数来创建对象。在js中，调用函数之前添加一个关键字new则表示调用其构造函数。构造函数中包含了指向新对象的变量this。 自测练习112345678910111213var a = function()&#123;&#125;a.b = 1a.prototype.b = 2a.prototype.c = 3a.prototype.d = 4console.log(a.b) console.log(new a().b)var foo = new a()foo.c = 5console.log(foo.c) console.log(foo.d)//请问输出的是什么？ 对构造函数来说，都会自动获得一个名为prototype的属性。默认情况下，该属性是一个普通的派生自Object.prototype的空对象。所有使用特定构造函数创建的对象都会将构造函数的prototype属性作为其原型。所以最后输出结果是：1254 自测练习2 12345678910var Foo = function()&#123; this.a = 1 return &#123; a:2 &#125;&#125;var bar = new Foo()console.log(bar.a)//请问输出是什么？ 构造函数包含了指向新对象的变量this， 除非构造函数显式地返回了另一个对象的值，否则构造函数会返回这个新创建的对象。定义了Foo这个构造函数，这个构造函数很明显是返回的是另一个对象{a:2},不需要this来指向新创建的对象 不知道是不是这样理解？所以新创建的bar即为构造函数内部返回的对象{a:2}，输出的结果是2。 无原型对象我们可以使用Object.create函数并根据特定原型来创建对象，可以传递null作为原型，并创建一个无原型对象。自测练习3 1234567var map = Object.create(null);console.log("toString" in map); var map = Object.create(&#123;a:1&#125;);console.log("toString" in map); console.log("a" in map);//请问输出是什么？ 第一个map，这个对象就是一个无原型对象，map里面没有prototype原型，toString函数也就不在map里面了，输出false第二个map，这个对象有原型且原型是{a:1}，要找map的属性中有没有toString，没有，再去map的原型中去找，原型是{a:1}，也没有toString，再找原型的原型，即对象{a:1}的原型，这个对象的原型默认为Object.prototype，发现是存在的，故输出true 不知道解释的对不对；最后一个console.log只需找一个原型就找到了，也输出true。所以最后输出的结果为：falsetruetrue]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2F2017%2F10%2F16%2F</url>
    <content type="text"><![CDATA[函数可以作为值使用，而且其局部变量会在每次函数调用时重新创建，由此引出一个值得我们探讨的问题：如果函数已经执行结束，那么这些有函数创建的局部变量会如何处理呢？下面的示例代码展示了这种情况。代码中定义了函数wrapValue，该函数创建了一个局部变量localVariable，并返回一个函数，用于访问并返回局部变量localVariable。 12345678910function wrapValue(n)&#123; var localVariable = n; return function() &#123;return localVariable;&#125;;&#125;var wrap1 = wrapValue(1);var wrap2 = wrapValue(2);console.log(wrap1);//1console.log(wrap2);//2 这段代码印证了局部变量会在每次函数调用时重新创建，不同的函数调用是不会对其它函数内的局部变量产生任何影响的， 我们把这种引用特定的局部变量实例的功能称为闭包。一个包装了一些局部变量的函数是一个闭包。很多高级应用可以利用闭包的特性来实现。 我们可以把关键字function 当作一种“冻结”代码并将其打包成函数值的模型。所以当你看到“return function(…){…}”这样的代码时，你可以将其理解为一个句柄，其中句柄指向一段包装好的计算代码。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[顺序栈的基本操作]]></title>
    <url>%2F2017%2F10%2F12%2F</url>
    <content type="text"><![CDATA[由于顺序栈的操作位置基本在栈底，所以，不需要查找插入和删除的位置，也不需要移动元素，因而顺序栈的基本操作要比顺序表简单的多，其基本操作时间复杂度均为O（1）。下面给出顺序栈的部分操作的实现。 （1）初始化操作。顺序栈的初始化就是构造一个空的顺序栈S，初始分配的最大容量为maxsize，预设的需要扩容的增量为incresize。其主要操作是：申请存储控件，栈顶指针的初始值置为-1. 12345678 void InitStack_Sq(SqStack &amp;S, int maxsize=STACK_INIT_SIZE, int incresize=STACKINCREMENT)&#123; S.stack=(ElemType *)malloc(maxsize*sizeof(ElemType)); //顺序栈的初始分配最大空间 if(!S.stack) exit(1); //存储控件分配失败 S.top = -1; //置栈空 S.stacksize = maSxsize; //顺序栈的当前容量 S.incrementsize = incresize; //增补空间&#125;//InitStack_Sq (2)求顺序栈的长度操作。统计顺序栈S中数据元素的个数，并返回统计结果。其主要操作是：返回顺序栈中栈顶指针的上一个位置。 123int StackLength_Sq(SqStack S)&#123; return S.top+1;&#125;//StackLength_Sq (3)进栈操作。将一个新元素插入到顺序栈S的栈顶的上一个位置，作为新的栈顶元素。其主要操作是：先判断顺序栈是否已满，若已满，则重新分配空间，然后将栈顶指针加1，再将进栈元素插入到栈顶处。 12345678910111213bool Push_Sq(SqStack &amp;S, ElemType e)&#123;//在顺序栈的栈顶插入元素eif(S.top==S.stacksize-1)&#123; S.stack=(ElemType *)realloc(S.stack,(S.stacksize+incrementsize)*sizeof(ElemType)); //栈满，给顺序栈增补空间 if(!S.stack) return false; //存储分配空间失败 S.stacksize+=S.incrementsize;&#125;S.stack[++top]=e; //栈顶指针上移，元素e进栈return true;&#125;//Push_Sq (4)出栈操作。将元素S的栈顶元素删除。其主要操作是：先判断栈顶指针书否为空，若非空，则将栈顶元素取出，然后将栈顶指针减1. 123456bool Pop_Sq(SqStack &amp;S, ElemType &amp;e)&#123;//删除顺序栈栈顶元素，并让e返回其值if(S.top==-1) return false;e = S.stack[S.top--]; return false;&#125;//Pop_Sq (5)取栈顶操作。取出顺序栈S的栈顶元素的值。其主要操作是：先判断顺序栈是否为空，若非空，则将栈顶元素取出。 123456bool GetTop_Sq(SqStack S,ElemType e)&#123;//取顺序栈顶元素，并让e返回其值if(S.top==-1) return false;e=S.stack[S.top];return true;&#125;//GetTop_Sq (6)判断栈空操作。判断顺序栈S是否为空。若S为空则返回true，否则返回false。 123456bool StackEmpty_Sq(SqStack S)&#123;if(S.top==-1) return true;return false;&#125;``` (7)撤销顺序栈操作。释放顺序栈S所占用的存储空间。 void DestroyStack_Sq(SqStack &amp;S){ free(S.stack); S.stacksize = 0; S.top = -1;}//DestroyStack_Sq ```总结 对于顺序栈S的相关操作，归纳起来主要有以下4个要素。 栈空条件：S.top == -1 栈满操作：S.top == S.stacksize-1 进栈操作：S.top++; 元素进栈 出栈操作：元素退栈，S.top–]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>堆栈</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态存储分配（堆分配）的顺序串与顺序表在操作上的异同]]></title>
    <url>%2F2017%2F10%2F11%2F</url>
    <content type="text"><![CDATA[串（string）（或字符串）是由零个或多个字符组成的有限序列，一般记为 s=‘a1a2...an’ (n&gt;=0) 串的数据元素固定为字符型的线性表，因此串的逻辑结构和线性表极为相似，只不过对串的操作常常是以”串的整体”或“子串”作为操作对象，而线性表的操作大多以“单个数据元素”为操作对象。 静态存储分配的顺序串（定长） 类似于线性表的顺序存储结构，用一组地址连续的存储单元存储串值的字符序列。在串的定长顺序存储结构中，按照预定义的大小，为每个定义的串变量分配一个固定长度 的存储区，则可以用定长数组如下描述。 1234567891011121314151617181920212223``` 串的实际长度在这预定义长度范围内随意，超过预定义长度的串值则被舍去，称之为“截断”。在这种存储结构表示如何实现串的操作，下面以串连接和求子串为例讨论。**串连接** Concat（&amp;T,S1,S2）假设S1、S2和T都是SSstring型的串变量，且串T是由串S1联结串S2得到的，则只要进行串的复制操作即可，只是需要对超长部分实施“截断”操作。基于串S1和S2长度的不同情况，串T值的产生可能有如下3种情况：（1）S1[0]+S2[0]&lt;=MAXSRETRLEN,得到的串T是正确的结果；（2）S1[0]&lt; MAXSRETRLEN而S1[0]+S2[0]&gt;MAXSRETRLEN,则将串S2的一部分截断，得到的串T只包含S2的一个子串；（1）S1[0]=MAXSRETRLEN,得到的串T并非联接结果，而和串S1相等。**求子串** SubString（&amp;Sub，S，pos。len）求子串的过程即为复制字符序列的过程，将串S中从第pos个字符开始长度为len的字符序列复制到串Sub中。``` CStatus SubString(SString &amp;Sub, SString S, int pos, int len)&#123; //用Sub返回串S的第pos个字符起长度为len的子串 //其中，1&lt;=pos&lt;=StrLength(S)且0&lt;=len&lt;=StrLength(S)-pos+1 if(pos&lt;1||pos&gt;S[0]||len&lt;0||len&gt;[0]-pos+1) return ERROR; Sub[1...len] = S[pos..pos+len-1]; //循环语句一个一个赋值 Sub[0] = len; return OK; //S串的长度置为len&#125;//Substring 综上两个操作可知，在顺序存储结构中，实现串操作的原操作为“字符序列的复制”，操作时间复杂度基于字符序列的长度。串连接的特点是，如果在操作中出现串值序列的长度超过MAXSTRLEN时，约定用截尾法处理，这种情况不仅在串联接时发生，在串的其它操作中，如插入、置换等也可能发生。克服这个弊病唯有不限定串长的最大长度，即动态分配串值的存储空间。 ###动态存储分配的顺序串（堆分配存储表示）由于多数情况下串的操作是以串的整体或子串的形式参与，则在应用程序中，参与运算的串变量之间的长度相差较大，因此为串变量设定固定大小空间的数组不尽合理，需要根据具体情况来决定串空间的大小。 动态存储分配的顺序串完全可以用动态存储分配的顺序表SqList来表示，这样的顺序表的有关操作都可以用来处理顺序串的相关操作，如初始化、求串长等。利用malloc()函数为每个新产生的串分配一块实际串所需的存储空间，若分配成功，则返回一个指向起始地址的指针，作为串的地址。这样，当进行串的插入、连接等操作时，再根据实际需要的增补空间，以满足插入和连接等操作的需要。所以在描述动态顺序串时，当前数组的容量和增补空间不再作为结构的一部分，其结构的描述如下： 1234typedef struct&#123; char *str; //存放空串的首地址 int length; //存放串的当前长度&#125;DSqString //动态顺序串类型 由于动态存储分配的顺序串既具有顺序存储结构的优点（随机存取，操作简单），同时串值空间的大小是在程序执行时动态分配而得，这对串的插入、连接、置换等操作非常有利，因此在串处理的应用程序中也常被选用。 这种存储结构表示的串操作仍是基于“字符序列的复制”进行的。1.串赋值操作串赋值操作就是把一个字符串常量赋值给顺序串S。成功赋值返回true，否则返回false。其主要操作是：①判断顺序串是否非空，若是，则释放其空间（尽管这样做也不影响操作的执行结果，但适时地进行空闲空间回收是一个好的编程习惯）；②求串常量的长度，若等于0，就将顺序串S置空，否则，以此长度为标准为顺序串S申请空间；③把串常量chars的值复制到串S中去，同时顺序串S的长度被赋值为串常量的长度。 123456789101112131415bool StrAssign_Sq(DSqString &amp;S, char *chars)&#123; //将字符串chars赋值给顺序串S int i,j; char *c; for(i=0,c=chars;*c;i++,c++); //求chars的长度 if(!i)&#123;S.str=NULL;S.length=0;&#125; //S置为空串 else&#123; if(!(S.str=(char *)malloc(i*sizeof(char)))) //给串S申请空间 return false; for(j=0;j&lt;i;j++) S.str[j]=chars[j]; //将数组中的字符赋值到串S中 S。length=i; //串长置为i &#125; return true;&#125;//StrAssign_Sq 又例如串复制操作StrCopy_Sq(&amp;T, S)的算法实现是，若串T已存在，则先释放T所占的空间，当S不空时，首先为T分配大小和S长度相等的存储空间，然后将串S复制到串T中；又如串插入操作（连接）操作StrConcat_Sq(&amp;S,T),首先判断T的长度是否为非0，若是，则为S分配长度为T.length的增补空间，然后将T中的所有字符复制在S的后面。 关于动态顺序串的主要操作与在顺序表中进行的相关操作的算法思想基本上是一致的，不同之处在于：①因为动态顺序串的存储空间分配是以串的实际长度为标准的，所以在有些操作（如插入、连接等）中首先需要根据实际情况增补存储空间；②在顺序串的操作中经常是针对串的整体（如串赋值）或串的一部分子串而进行的，这样的操作相对于顺序表要复杂一些。以串插入操作为例，首先需要增补存储空间以便能够存放插入后的串，其次是要把从插入位置pos到串末尾的每一个字符串向后移动T.length个位置（而不是顺序表的一个位置），最后再把子串中的每一个字符（而不是顺序表的一个字符）复制到主串的相应位置。所以他的时间开销相比顺序表的插入要多一些，其它操作类似。]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆栈的顺序存储---顺序栈]]></title>
    <url>%2F2017%2F10%2F10%2F</url>
    <content type="text"><![CDATA[堆栈的顺序存储结构简称顺序栈，它是利用一组地址连续的存储单元依次存放自栈底到栈顶之间的元素。 顺序栈本质是顺序表的简化，唯一需要确定的是用顺序表的那一段表示栈底。通常把顺序表的表头（数组中下标为0）的一端作为栈底，同时附设指针top指示的栈顶元素在顺序表中的位置，top也被成为栈顶指针。 由于顺序表都是在栈顶的位置进行相关操作，因而栈顶指针top的当前位置是非常重要的。在对顺序表进行初始化时，栈顶指针top的初值习惯置为0，表示空栈（不含数据元素的栈），但因为C/C++中，数组的下标从0开始，因此top值为0时表示空栈，则意味着栈顶指针指向的是实际上的栈顶元素的上一个位置。因而，对用C/C++描述的顺序栈一般以top=-1表示空栈，这样，进栈操作时，先使top增1，用以表示新的栈顶位置，然后再把元素插入到top所指示的位置上；而出栈时则是先去除栈顶元素，再使top减1，top指针只想新的元素。这样的操作的结果就是栈顶指针指向真正的栈顶元素。 当然，用top=0和top=-1表示空栈，都是可以的，只要实际的操作与此配套就行 注意：*在顺序栈中，top起到指示栈顶元素的作用，他的值可以表示数组的下标，因此，top是一个相对指针* 在对顺序栈进行操作时可能发生两种溢出，一种称为“上溢”（overflow），另一种成为“下溢”（underflow），设存储栈元素的数组长度为stacksize，则 （1）当top&gt;=stacksize-1时，表示系统作为栈用的存储控件已满。如果还有元素要求进栈，则栈溢出，即上溢，这时需要进行栈满处理。如果是用静态顺序存储结构表示顺序栈，一旦发生上溢，程序将终止运行。并向用户告知栈满信息；而如果采用动态顺序存储结构表示顺序栈，一旦发生上溢，可向系统重新申请空间以满足插入要求。 （2）当top=-1时，表示系统作为栈用的存储区已空，栈中无任何元素。这时若还要做出栈运算，则发生下溢。通常用栈空来作为控制转移的条件俺，表明数据已处理完毕。 一般来说，在对顺序栈进行插入元素之前，要判断栈是否“栈满”，而对顺序栈进行删除元素之前，要判断栈是否“栈空”。 顺序栈的结构描述： 用C/C++描述顺序栈时，可以用顺序表的结构描述，只不过在顺序栈中，习惯用标识符top表示栈顶，而不用标识符length。 12345678#define STACK_INIT_SIZE 100 //顺序栈（默认的）的初始分配最大容量#define STACKINCREMENT //（默认的）增补控件 typedef struct&#123; ElemType *stack; //存储数据元素的一维数组 int top; //栈顶指针 int stacksize; //当前分配的数组容量 int incrementsize; //增补空间量（以ElemType为单位）&#125;SqStack;//顺序栈 这里对比一下顺序表的结构描述 123456typedef struct&#123; ElemType *elem; //存储数据元素的一维数组 int length; //线性表的当前长度 int listsize; //当前分配的数组容量 int incrementsize; //增补空间量（以ElemType为单位）&#125;SqList;//顺序表的动态分配 两个结构的描述经过对比，区别一清二楚]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>堆栈</tag>
      </tags>
  </entry>
</search>
