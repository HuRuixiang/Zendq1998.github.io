<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端的性能优化]]></title>
    <url>%2F2018%2F11%2F16%2F%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[从浏览器发起请求到页面能正常浏览的阶段预处理——&gt;DNS解析——&gt;建立连接——&gt;发起请求——&gt;等待响应——&gt;接受数据——&gt;处理元素——&gt;布局渲染 浏览器端 输入提示 从浏览器地址框输入一个 g ，浏览器会根据你的历史访问，书签等，给出输入建议，假如说我以前打开过 google.com，浏览器就会根据它的算法匹配并给出几条建议地址。 url 解析 当协议或主机名不合法时，也就是不符合 URL 格式，比如输入几个单词，中文等。浏览器会将地址栏中输入的文字传给默认的搜索引擎。 合法的 URL 格式: &lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt; DNS解析什么是DNS解析简单来说，就是域名转换成ip地址的过程 为什么要DNS解析因为 http 是基于 tcp 连接的，而 tcp 则是通过 ip 地址去识别访问的。所以一定要找到服务器的ip地址。 DNS域名解析过程 查找浏览器缓存 浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束，没有则下一步。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果时间设置太短，会导致用户每次访问网站都要重新解析一次域名。 打开 chrome://net-internals/#dns 即可查看本机浏览器的 dns 缓存。 查找系统缓存 如果用户的浏览器缓存中没有，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果,浏览器会调用一个类似 gethostbyname 的库函数，此函数会先去检测本地 hosts 文件，查看是否有对应 ip。例如，localhost 默认 ip 是 172.0.0.1。 路由器缓存、ISP 缓存 如果浏览器和系统缓存都没有，系统的 gethostname 函数就会像 DNS 服务器发送请求。而网络服务一般都会先经过路由器以及网络服务商（电信），所以会先查询路由器缓存，然后再查询 ISP 的 DNS 缓存。也就是本地区的域名服务器，通常是提供给你接入互联网的应用提供商。这个专门的域名解析服务器性能都会很好，它们一般都会缓存域名解析结果，当然缓存时间是受域名的失效时间控制的，一般缓存空间不是影响域名失效的主要因素。 递归搜索 最无奈的情况发生了, 在前面都没有办法命中的DNS缓存的情况下,(1)本地 DNS服务器即将该请求转发到互联网上的根域(.)，通常省略不写。(2)根域将所要查询域名中的顶级域（.com, .org）的服务器IP地址返回到本地DNS。(3) 本地DNS根据返回的IP地址，再向顶级域（就是com域）发送请求。(4) com域服务器再将域名中的二级域（google.com）的IP地址返回给本地DNS。(5) 本地DNS再向二级域发送请求进行查询。(6) 之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。这时候主机才能通过域名访问该网站。 如果域名正常，应该就会返回 IP 地址，如果没有浏览器就会提示找不到服务器地址。 DNS有关的性能优化DNS 查询的过程经历了很多的步骤，如果每次都如此，是不是会耗费太多的时间，资源。所以我们应该尽早的返回真实的 IP 地址，减少查询过程，也就是 DNS 缓存。浏览器获取到 IP 地址后，一般都会加到浏览器的缓存中，本地的 DNS 缓存服务器，也可以去记录。 减少DNS查找，避免重定向 服务器可以设置TTL值表示DNS记录的存活时间。本机DNS缓存将根据这个TTL值判断DNS记录什么时候被抛弃，这个TTL值一般都不会设置很大，主要是考虑到快速故障转移的问题。 浏览器DNS缓存也有自己的过期时间，这个时间是独立于本机DNS缓存的，相对也比较短，例如chrome只有1分钟左右。 浏览器DNS记录的数量也有限制，如果短时间内访问了大量不同域名的网站，则较早的DNS记录将被抛弃，必须重新查找。不过即使浏览器丢弃了DNS记录，操作系统的DNS缓存也有很大机率保留着该记录，这样可以避免通过网络查询而带来的延迟。 DNS的预解析 可以通过用meta信息来告知浏览器, 我这页面要做DNS预解析 1&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt; 使用link标签来强制对DNS做预解析: 1&lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://ke.qq.com/&quot; /&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[typeof、instanceof的实现原理]]></title>
    <url>%2F2018%2F11%2F02%2Ftypeof%E5%92%8Cinstanceof%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[typeof参考 typeof操作符返回一个字符串，表示未经计算的操作数的类型。 JavaScript底层在存储变量时，变量的值是由一个表示类型的标签和实际数据值表示的（都是二进制）。 在JavaScript最初的版本中，使用的时32位系统，为了性能考虑使用低位（前三位）存储了变量的类型信息： 000: 对象 001: 整数 010: 浮点数 100: 字符串 110: 布尔 undefined和null的机器码比较特殊： undefined: -2^30 null: 全0 typeof会根据值的类型信息返回的对应的字符串，而代表空指针的null的机器码是全0，它的类型标签自然就是000，所以typeof null返回&quot;object&quot;。 instanceof参考 instanceof是一个二元运算符，如a instanceof b，其中a必须是一个合法的JavaScript对象，b必须是一个合法的JavaScript函数。 至于实现原理，用mdn的话来说：instance运算符用于测试构造函数的prototype属性是否出现在对象原型链中的任何位置。 用代码表示它的实现原理： 12345678910111213function my_instanceof(obj, constructor) &#123; let constuctProto = constructor.prototype while (true) &#123; if (obj.__protp__ === null) &#123; // 遍历完对象的原型链 return false &#125; if (obj.__proto__ === constuctProto) &#123; return true &#125; obj = obj.__proto__ &#125;&#125; 下面举几个例子 Object instanceof Object === true 右边的Object被看作是一个构造函数 构造函数的prototype属性是Object.prototype 左边的Object被看作是一个对象，接下来遍历一下这个对象的原型链 Object是一个构造函数，那么他的构造函数是Function,Object.__proto__ === Function.prototype，而Function.prototype又是一个普通的对象，他的构造函数是Object，即Object.__proto__.__proto__ === Object.prototype，现在找到构造函数的prototype属性出现在对象原型链了。 两个方法的比较以上，当我们需要判断变量类型的时候，如果是基本数据类型，可以用typeof,不过需要注意null这个特殊情况。instanceof主要是判断对象的原型链上有没有测试构造函数的prototype属性，偏向寻找构造原型。要想更精确地判断对象实例的类型时，可以采用Object.prototype.toString.call方法]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebStorage]]></title>
    <url>%2F2018%2F10%2F31%2FWebStorageAPI%2F</url>
    <content type="text"><![CDATA[CookieCookie是什么 Cookie是一小段文本信息，伴随着用户请求在 Web 服务器和浏览器之间传递。它存储于访问者的计算机中，每当同一台计算机通过浏览器请求某个页面时，就会发送这个 cookie。 它是浏览器提供的一种机制，它将 document 对象的 cookie 属性提供给 JavaScript。可以使用JavaScript来创建和取回 cookie 的值，因此我们可以通过document.cookie访问它。 cookie是存于用户硬盘的一个文件，这个文件通常对应于一个域名，也就是说，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。 Cookie的分类Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。 内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。 为什么用CookieHTTP是一种不保存状态，即无状态（stateless）协议。HTTP协议自身不对请求和相应之间的通信状态进行保存。 协议本身并不保留之前一切的请求或者响应报文的信息，这是为了更快地处理大量事物，确保协议的可伸缩性，而特意把HTTP协议设计成如此简单的。 可是随着Web的不断发展，因为无状态导致业务变得棘手的情况增多了。典型的情况是一家购物网站，当用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么。所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。 Cookie会根据服务端发送的相应报文内的一个叫做Set-Cookie的收不字段信息，通知客户端保存Cookie。当客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。 服务端发现客户端发送过来的Cookie后，回去检查究竟时哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。 浏览器没有Cookie信息状态下发送请求 浏览器保存Cookie之后，发送请求时会自动携带domain（域名）属性与服务器相同的Cookie 关于Cookie的HTTP请求和相应的内容如下： 摘录自: 上野 宣. “图解HTTP” 下面我用github个人主页举一个例子： 进入浏览器的开发者选项–&gt;Application–&gt;Storage–&gt;Cookie，可以看到我们存储的每个Cookie都是由属性和值的形式组成，其中包括name=dotcom_user;value=Zendq1998和name=logged_in;value=yes, 这些都是我的个人用户登陆信息。 再看我们向github个人主页发送的第一个请求，在request header中有一个Cookie的属性，这是一堆字符串，正是storage中domain为github.com的所有Cookie通过name=value;组成的(中间有空格)。 有了这样的机制，我们可以将我们的用户信息保存在Cookie内，每次访问对应的网站会自动携带这些信息，这样就避免重复验证身份了。 JavaScript操作CookieMDN Cookie与token这两者都可以用作用户身份验证，发送请求时一般都放在headers中。 我在团队目前的项目中，还没有遇到过服务器传给前端Set-Cookie的情况，用户的身份认证往往是在请求的headers中添加我们的token。token的值是一串字符串，可以简单地进行一下用户验证，而Cookie是一些列name=value组成的字符串，相对来说信息量大一点，当然，复杂的用户信息就可以拿来做一些精准推送啥的了，或者是类似购物车信息。 Cookie和Token Cookie的缺陷 Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。 由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS。（设置Secure属性为true） Cookie的大小限制在4KB左右，对于复杂的存储需求来说是不够用的。 Web storageWeb Storage最早是在Web超文本应用技术工作组（WHAT-WG）的Web应用1.0规范中描述的。这个规范的最初的工作最终成为了HTML5的一部分。Web Storage的目的是克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。Web Storage的两个主要目标是： 提供一种在cookie之外存储会话数据的途径； 提供一种存储大量可以跨会话存在的数据的机制。 Web Storage规范主要包含了两种对象的定义：localStorage和sessionStorage，存在于window对象中。localStorage和sessionStorage的区别主要是在于其生存期。 localStoragelocalStorage是HTML5标准中新加入的技术，用于本地存储。为每一个给定的源（given origin）维持一个独立的存储区域，没有过期时间，只能主动删除。 用法参见MDN-localStorage sessionStorage和localStorage相似，sessionStorage为每一个给定的源维持一个独立的存储区域，而session这个词的意思是”会话“，所以该存储区域在页面会话期间可用，意思是它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在，但当页面关闭后，sessionStorage 中的数据就会被清空。 用法参见MDN-sessionStorage 三者的异同 应用场景有了对上面这些差别的直观理解，我们就可以讨论三者的应用场景了。 因为考虑到每个 HTTP 请求都会带着 Cookie 的信息，所以 Cookie 当然是能精简就精简啦，比较常用的一个应用场景就是判断用户是否登录。针对登录过的用户，服务器端会在他登录时往 Cookie 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。曾经还使用 Cookie 来保存用户在电商网站的购物车信息，如今有了 localStorage，似乎在这个方面也可以给 Cookie 放个假了~ 而另一方面 localStorage 接替了 Cookie 管理购物车的工作，同时也能胜任其他一些工作。比如HTML5游戏通常会产生一些本地数据，localStorage 也是非常适用的。如果遇到一些内容特别多的表单，为了优化用户体验，我们可能要把表单页面拆分成多个子页面，然后按步骤引导用户填写。这时候 sessionStorage 的作用就发挥出来了。 参考资料 常用本地存储–Cookie篇 Cookie和Token Wiki 详说 Cookie, LocalStorage 与 SessionStorage 《图解HTTP》2.3 &amp; 2.8 《javascript高级程序设计》]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript之原生函数]]></title>
    <url>%2F2018%2F10%2F28%2FJs%E4%B9%8B%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[内置类型JS 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和对象（Object）。 6 种原始类型: Boolean: 布尔表示一个逻辑实体，可以有两个值：true 和 false Null: Null 类型只有一个值： null Undefined: 一个没有被赋值的变量会有个默认值 undefined Number: 根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(2^63 -1) 到 2^63 -1）。它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。 String Symbol (ECMAScript 6 新定义) 和 Object 原始值除 Object 以外的所有类型都是不可变的（值本身无法被改变）。例如，与 C 语言不同，JavaScript 中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“原始值”。 stringJavaScript的字符串类型用于表示文本数据。它是一组16位的无符号整数值的“元素”。在字符串中的每个元素占据了字符串的位置。第一个元素的索引为0，下一个是索引1，依此类推。字符串的长度是它的元素的数量。 不同于类 C 语言，JavaScript 字符串是不可更改的。这意味着字符串一旦被创建，就不能被修改。但是，可以基于对原始字符串的操作来创建新的字符串。例如： 获取一个字符串的子串可通过选择个别字母或者使用 String.substr(). 两个字符串的连接使用连接操作符 (+) 或者 String.concat(). symbol符号(Symbols)是ECMAScript 第6版新定义的。符号类型是唯一的并且是不可修改的, 并且也可以用来作为Object的key的值. 在某些语言当中也有类似的原子类型(Atoms). 你也可以认为为它们是C里面的枚举类型. object属性在 Javascript 里，对象可以被看作是一组属性的集合。用对象字面量语法来定义一个对象时，会自动初始化一组属性。这些属性还可以被增减。属性的值可以是任意类型，包括具有复杂数据结构的对象。属性使用键来标识，它的键值可以是一个字符串或者符号值（Symbol）。 ECMAScript定义的对象中有两种属性：数据属性和访问器属性。 数据属性 数据属性是键值对，并且每个数据属性拥有下列特性: 访问器属性 访问器属性有一个或两个访问器函数 (get 和 set) 来存取数值，并且有以下特性: 常用的原生函数 String() Number() Boolean() Array() Object() Function() RegExp() Date() Error() Symbol() –ES6新加入的 DateECMAScript中的Date类型是在早期Java中的java.util.Date类基础上构建的。为此，Date类型使用自UTC（Coordinated Universal Time，国际协调时间）1970年1月1日午夜（零时）开始经过的毫秒数来保存日期。 在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根据特定的日期和时间创建日期对象，必须传入表示该日期的毫秒数（即从UTC时间1970年1月1日午夜起至该日期止经过的毫秒数）。为了简化这一计算过程，ECMAScript提供了两个方法：Date.parse()和Date.UTC()。 其中，Date.parse()方法接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数。ECMA-262没有定义Date.parse()应该支持哪种日期格式，因此这个方法的行为因实现而异，而且通常是因地区而异。将地区设置为美国的浏览器通常都接受下列日期格式： “月/日/年”，如6/13/2004； “英文月名 日,年”，如January 12,2004； 例如，要为2004年5月25日创建一个日期对象，可以使用下面的代码： 1var someDate = new Date(Date.parse(&quot;May 25, 2004&quot;)); 如果传入Date.parse()方法的字符串不能表示日期，那么它会返回NaN。实际上，如果直接将表示日期的字符串传递给Date构造函数，也会在后台调用Date.parse()。换句话说，下面的代码与前面的例子是等价的： 1var someDate = new Date(&quot;May 25, 2004&quot;); 这行代码将会得到与前面相同的日期对象。 RegExp下面先说用字面量模式创建一个正则表达式： 1var expression = / pattern / flags ; 其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。正则表达式的匹配模式支持下列3个标志。 g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止； i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写； m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。 另一种创建正则表达式的方式是使用RegExp构造函数，它接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字符串。可以使用字面量定义的任何表达式，都可以使用构造函数来定义，如下面的例子所示。 123456789/* * 匹配第一个"bat"或"cat"，不区分大小写 */var pattern1 = /[bc]at/i;/* * 与pattern1相同，只不过是使用构造函数创建的 */var pattern2 = new RegExp("[bc]at", "i"); RegExp模式参数元字符的双重转义传递给RegExp构造函数的两个参数都是字符串（不能把正则表达式字面量传递给RegExp构造函数）。由于RegExp构造函数的模式参数是字符串，所以在某些情况下要对字符进行双重转义。所有元字符都必须双重转义，那些已经转义过的字符也是如此，例如\n（字符\在字符串中通常被转义为\，而在正则表达式字符串中就会变成\\）。下表给出了一些模式，左边是这些模式的字面量形式，右边是使用RegExp构造函数定义相同模式时使用的字符串。 数据类型转换]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP协议原理以及实践]]></title>
    <url>%2F2018%2F07%2F04%2FHTTP%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[HTTP协议基础HTTP协议是再应用层上，构建于TCP协议之上。 参考资料 TCP(传输控制协议)传输控制协议（TCP）是一个面向连接的协议，它保证了两台计算机之间数据的可靠性和顺序。换句话说，TCP是一种传输层协议，它可以让你将数据从一台计算机有序地传输到另一台计算机。正式由于这些特点，HTTP协议都是基于TCP协议的。 HTTP发展历史HTTP/0.9 只有一个命令GET 没有HEADER等描述数据的信息 服务器发送完毕，就关闭TCP连接，一个TCP连接只有一次http请求 HTTP/1.0 增加了很多命令（比如POST、PUT等） 增加status code（描述服务端处理某一个请求之后的状态）和header（对请求的数据的描述和对数据操作的方法） 多字符集支持、多部分发送、权限、缓存 一个http请求还是要创建一个tcp连接，服务端返回完内容之后，tcp连接会关闭掉 HTTP/1.1 持久连接（一个tcp连接对应多个http请求） 服务端对请求的处理的串行的 增加host（一台物理服务器可以开启多个web服务） HTTP2 所有的数据以二进制进行传输（以前是字符串） 同一个连接里面发送多个请求不再需要按照顺序来 头信息压缩以及推送（服务端可以主动发起数据传输：比如服务器主动传输css文件和js文件）等提高效率的功能 三次握手在tcp连接的创建过程中有三次握手的消耗，代表有三次网络传输（客户端发送一次、服务端返回一次、然后客户端再发送一次），tcp连接创建完成之后，才能有我们的HTTP请求。 参考资料 我用node写的一个基于TCP协议的聊天程序 第一次握手(SYN=1, seq=x): 客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。 发送完毕后，客户端进入 SYN_SEND 状态。 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1): 服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。 第三次握手(ACK=1，ACKnum=y+1) 客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1 发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。 进行三次握手的原因：为了防止服务端开启一些无用的tcp连接。网络传输有延时的，服务端接收到来自客户端的一个创建连接是请求，如果服务端直接创建了这个连接并且把相对应的内容返回给客户端，但是返回的这个数据包因为网络传输的原因丢失了，那么客户端就一直没有接收到服务器返回的数据，客户端可能会因为设置了请求超时设置，就会关闭这个连接再重新创建新的连接请求，但是如果没有三次握手的话，服务端不知道客户端到底也没有接收到返回的信息，这个端口就会一直开着等待客户端来发送请求，服务端的这个端口的开销就浪费了。所以我们需要三次握手让客户端和服务端能够及时地察觉到因为网络原因导致数据包没有收到，可以规避因为网络原因导致的服务器额外开销的问题，达到可靠性的要求。]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>HTTP协议</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js的内存泄漏]]></title>
    <url>%2F2018%2F05%2F23%2Fjs%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%2F</url>
    <content type="text"><![CDATA[内存泄漏什么是内存泄漏在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。 总结一下，用不到的或者失去控制权（没有变量或指针指向的）的内存，没有及时释放，就叫内存泄漏。 简单的例子一个来自维基百科的例子： 在此例中的应用程序是一个简单软件的一小部分，用来控制升降机的运作。此部分软件当乘客在升降机内按下一楼层的按钮时运行。 当按下按钮时： 要求使用存储器，用作记住目的楼层 把目的楼层的数字储存到存储器中 升降机是否已到达目的楼层？ 如是，没有任何事需要做：程序完成 否则： 等待直至升降机停止 到达指定楼层 释放刚才用作记住目的楼层的存储器 此程序有一处会造成存储器泄漏：如果在升降机所在楼层按下该层的按钮（即上述程序的第4步），程序将触发判断条件而结束运行，但存储器仍一直被占用而没有被释放。这种情况发生得越多，泄漏的存储器也越多。 这个小错误不会造成即时影响。因为人不会经常在升降机所在楼层按下同一层的按钮。而且在通常情况下，升降机应有足够的存储器以应付上百次、上千次类似的情况。不过，升降机最后仍有可能消耗完所有存储器。这可能需要数个月或是数年，所以在简单的测试下这个问题不会被发现。 而这个例子导致的后果会是不那么令人愉快。至少，升降机不会再理会前往其他楼层的要求。更严重的是，如果程序需要存储器去打开升降机门，那可能有人被困升降机内，因为升降机没有足够的存储器去打开升降机门。 存储器泄漏只会在程序运行的时间内持续。例如：关闭升降机的电源时，程序终止运行。当电源再度打开，程序会再次运行而存储器会重置，而这种缓慢的泄漏则会从头开始再次发生。 C 内存管理没有内置自动垃圾回收的编程语言，如C及C++，必须手动释放内存，程序员负责内存管理。一般情况下，存储器泄漏发生是因为不能访问动态分配的存储器。 先看一下c语言的内存管理，C可以有静态和动态的内存管理。其中动态管理为了灵活分配和管理内存为c语言提供了几个函数。 函数 描述 void calloc(int num, int size); 该函数分配一个带有 function allocates an array of num 个元素的数组， 每个元素的大小为 size字节。 void free(void address); 该函数释放 address 所指向的h内存块。 void malloc(int num); 该函数分配一个 num 字节的数组，并把它们进行初始化。 void realloc(void *address, int newsize); 该函数重新分配内存，把内存扩展到 newsize。 对于预先不知道需要存储的文本长度，例如您向存储有关一个主题的详细描述。在这里，我们需要定义一个指针，该指针指向未定义所学内存大小的字符，后续再根据需求来分配内存，如下所示： 123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main()&#123; char name[100]; char *description; strcpy(name, "Zara Ali"); /* 动态分配内存 */ description = malloc( 200 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, "Error - unable to allocate required memory\n"); &#125; else &#123; strcpy( description, "Zara ali a DPS student in class 10th"); &#125; printf("Name = %s\n", name ); printf("Description: %s\n", description );&#125; 也可以使用 calloc() 来编写，只需要把 malloc 替换为 calloc 即可，如下所示： 1calloc(200, sizeof(char)); 可以通过调用函数 realloc() 来增加或减少已分配的内存块的大小。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main()&#123; char name[100]; char *description; strcpy(name, "Zara Ali"); /* 动态分配内存 */ description = malloc( 30 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, "Error - unable to allocate required memory\n"); &#125; else &#123; strcpy( description, "Zara ali a DPS student."); &#125; /* 假设您想要存储更大的描述信息 */ description = realloc( description, 100 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, "Error - unable to allocate required memory\n"); &#125; else &#123; strcat( description, "She is in class 10th"); &#125; printf("Name = %s\n", name ); printf("Description: %s\n", description ); /* 使用 free() 函数释放内存 */ free(description);&#125; 当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 free() 来释放内存。 123456char * buffer;buffer = (char*) malloc(42);// Do something with bufferfree(buffer); malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。 再举个c++的内存泄漏例子： 123456789101112#include &lt;iostream&gt;using namespace std;int main()&#123; int *a = new int(123); cout &lt;&lt; *a &lt;&lt; endl; // We should write "delete a;" here a = new int(456); cout &lt;&lt; *a &lt;&lt; endl; delete a; return 0;&#125; 存储了整数123的内存空间不能被删除，因为地址丢失了。这些空间已无法再使用。 垃圾回收机制类似c/c++这样的语言需要程序员自己来负责内存管理，这样很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”。 垃圾回收机制怎么知道，哪些内存不再需要呢？ 最常使用的方法叫做”引用计数”（reference counting）：语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。 上图中，左下角的两个值，没有任何引用，所以可以释放。 如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏。 12const arr = [1, 2, 3, 4];console.log('hello world'); 上面代码中，数组[1, 2, 3, 4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存。 如果增加一行代码，解除arr对[1, 2, 3, 4]引用，这块内存就可以被垃圾回收机制释放了。 123let arr = [1, 2, 3, 4];console.log('hello world');arr = null; 上面代码中，arr重置为null，就解除了对[1, 2, 3, 4]的引用，引用次数变成了0，内存就可以释放出来了。 因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就必须手动解除引用。 内存泄漏的识别方法利用浏览器Chrome 浏览器查看内存占用 打开开发者工具，选择 Performance 面板 (以前叫timeline) 在顶部的Capture字段里面勾选 Memory 点击左上角的录制按钮。 在页面上进行各种操作，模拟用户的使用情况。 一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。 如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。 反之，就是内存泄漏了。 WeakMapES6推出了两种新的数据结构：WeakSet 和 WeakMap。它们对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个”Weak”，表示这是弱引用。 123456const wm = new WeakMap();const element = document.getElementById('example');wm.set(element, 'some information');wm.get(element) // "some information" 上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。 也就是说，DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。 基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。 参考资料JavaScript 内存泄漏教程 How JavaScript works: memory management]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序上手]]></title>
    <url>%2F2018%2F05%2F15%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E6%89%8B%2F</url>
    <content type="text"><![CDATA[开始文件类型与目录结构微信客户端在打开小程序之前，会把整个小程序的代码包下载到本地。 紧接着通过 app.json 的 pages 字段就可以知道你当前小程序的所有页面路径: 123456&#123; "pages":[ "pages/index/index", "pages/logs/logs" ]&#125; 这个配置说明在项目定义了两个页面，分别位于 pages/index/index 和 pages/logs/logs 目录。而写在 pages 字段的第一个页面就是这个小程序的首页(打开小程序看到的第一个页面)。 于是微信客户端就把首页的代码装载进来，通过小程序底层的一些机制，就可以渲染出这个首页。 小程序启动之后，在 app.js 定义的 App 实例的 onLaunch 回调会被执行: 12345App(&#123; onLaunch: function () &#123; // 小程序启动之后 触发 &#125;&#125;) 整个小程序只有一个 App 实例，是全部页面共享的。 项目目录下面的以app开头的js、json、wxss文件是描述应用程序整个的状态，在全局里面是唯一的（因为只有一个应用程序）。 123456// app.json&#123; "pages": [ "pages/welcome/welcom" ]&#125; app.json中page的注册，只写了文件名，没有写后缀，这样并不是注册某一个wxml或者某一个js文件，而是注册名为welcome的所有文件，自动地把welcome相关的4种类型的文件关联再一起。 注册小程序页面以及组件的用法 Swiper组件：做轮播 Flex弹性盒子模型 在flex容器中默认存在两条轴，水平主轴(main axis) 和垂直的交叉轴(cross axis)。 在容器中的每个单元块被称之为 flex item，每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size)。 注意：不能先入为主认为宽度就是 main size，高度就是 cross size，这个还要取决于你主轴的方向，如果你垂直方向是主轴，那么项目的高度就是 main size。 flex-direction：决定主轴的方向（即项目排列方向） css .container { flex-direction: row | row-reverse | column | column-reverse; } 默认值：row，主轴为水平方向，起点在左端。 row-reverse ：株洲为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap：决定容器内项目是否可换行。 默认情况下，项目都排在主轴线上，使用flex-wrap可实现项目的换行。 123.container &#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 默认值：nowrap不换行，即当主轴尺寸固定，当空间不足时，项目尺寸会随之调整而不会挤到下一行。 wrap：项目主轴尺寸超出容器时换行，第一行在上方。 wrap-reverse：换行，第一行在下方。 justify-content：定义了项目在主轴的对齐方式。 123.container &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; 默认值：flex-start左对齐。 flex-end：右对齐。 center：居中。 space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。 space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍。 align-items：定义了项目再交叉轴上的对齐方式 123.container &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; 主轴为水平方向，即flex-direction: row 默认值为stretch：如果项目未设置高度或者设置为auto，将占满整个容器的高度。 假设容器高度为100px，而项目都没有设置高度的情况下，则项目的高度也为100px。 first-start：交叉轴的起点对齐 假设容器高度设置为 100px，而项目分别为 20px, 40px, 60px, 80px, 100px, 则如上图显示。 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 移动端分辨率及小程序自适应单位RPXrpx单位是微信小程序中css的尺寸单位，rpx可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。 参考资料：微信小程序开发文档]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统概述]]></title>
    <url>%2F2018%2F05%2F11%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[计算机系统基本组成与基本功能冯·诺依曼结构主要思想 计算机应由运算器、控制器、存储器、输入设备和输出设备五个基本部件组成 各个部件的功能： 存储器：不仅能存放数据，而且能存放指令，形式上两者没有区别，但计算机应能区分数据还是指令； 控制器：应能够自动取出指令来执行； 运算器：应能进行加/减/乘/出四种基本算术运算，并且也能进行一些逻辑运算和附加运算； 操作人员可以通过输入设备、输出设备和主机进行通信； 内部以二进制表示指令和数据。每条指令由操作码和地址码两部分组成。操作码指出操作类型，地址码指出操作数的地址。由一串指令组成程序。 采用“存储程序”工作方式。 现代计算机结构模型及工作原理 计算机执行程序，和它的内部结构是紧密关联的。 计算机是如何工作的把计算机执行程序比做你妈在厨房做菜～ 做菜前 原材料（数据）和菜谱（指令）都按序放在厨房（CPU）外的架子（存储器）上，每个架子都有编号（存储单元地址）。 菜谱的内容：原料位置、做法、做好的菜放哪等。例如：把10、11号架子上的原料一起炒，并装入3号盘。 然后，你告诉你妈：从第5个架子上（起始PC=5）指定菜谱开始做 开始做菜 第一步：从5号架子上取菜谱（根据PC取指令） 第二步：看菜谱（指令译码） 第三步：从架子上或盘中取原材料（取操作数） 第四步：根据菜谱规定洗、切、炒等具体操作（执行指令） 第五步：装盘或者直接送桌（回写结果） 第六步：算出下一菜谱所在架子编号6=5+1（修改PC的值） 继续做下一道菜（执行下一条指令） 程序执行前 数据和指令事先放在存储器中，每条指令和每个数据都有地址，指令按序存放，指令由OP、ADDR字段组成，程序起始地址置PC。 开始执行程序 第一步：根据PC取指令 第二部：指令译码 第三步：取操作数 第四步：指令执行 第五步：回写结果 第六步：修改PC的值 继续执行下一条指令 指令和数据 程序启动之前，指令和数据都存放在存储器中，形式上没有差别，都是0/1序列。 采用“ 存储程序 ”工作方式： 程序由指令组成，程序被启动后，计算机只能自动取出一条一条指令执行，在执行过程中无需人的干预。 指令中需给出的信息： 操作性质（操作码） 源操作数1或/和源操作数2 （立即数、寄存器编号、存储地址） 目的操作数地址（寄存器编号、存储地址） 存储地址的描述与操作数的数据结构有关！ 程序开发和执行过程从机器语言到高级语言最早的程序开发过程用机器语言编写程序，并记录在纸带或卡片上。 输入：按钮、开关 输出：指示灯等 所有的信息都是0/1序列！ 其执行速度快，但是书写、阅读及其困难。 汇编语言开发程序 汇编语言程序由汇编指令构成，汇编指令是用助记符和标号来表示的指令。 用助记符表示操作码 用标号表示位置 用助记符表示寄存器 指令： 包含操作码和操作数或其地址码（机器指令用二进制表示，汇编指令用符号表示）。 只能描述： 取（或存一个数） 两个数加（或减、乘、除、与、或等） 根据运算结果判断是否转移执行 通过汇编程序用来把汇编程序写的程序转化成机器语言写的程序。 优点： 不会因为增减指令而需要修改其他指令 不需记忆指令编码，编写方便 可读性比机器语言强 缺点： 程序会很长：需要描述的细节太多，程序会很长很长。 不可移植：在不同结构的机器上就不能运行。 结论：机器语言和汇编语言都是面向机器结构的语言，与机器的结构相关。用汇编语言比机器语言好，但是，还是很麻烦。 高级语言开发程序 随着技术的发展，出现了许多高级编程语言 它们与具体机器结构无关 面向算法描述，比机器级语言描述能力强得多 有“ 面向过程 ”和“ 面向对象 ”等语言之分 处理逻辑分为三种结构：顺序结构、选择结构、循环结构 最终要将高级语言转化为机器语言，有两种转换方式： 编译程序（Complier）：将高级语言源程序转换为机器级目标程序（机器语言或者汇编语言），执行时只要启动目标程序即可。 解释程序（Interpreter）：将高级语言语句逐条翻译成机器指令并立即执行，不生成目标文件。 hello worldhello.c程序的转换处理过程123456// hello.c#include &lt;stdio.h&gt;int main() &#123; printf("hello world\n");&#125; hello.c的ascii文本表示源程序中其实存放的是程序的ascii文本表示。显然计算机是不能执行hello.c。 以下是gcc+Linux平台中的处理过程： 源程序hello.c（文本）——预处理(cpp)——&gt;源程序hello.i（文本）——编译(cc1)——&gt; 汇编语言程序hello.s（文本）——汇编(as)——&gt;可重定位目标程序hello.o（二进制）——print.o连接(Id)——&gt;可执行目标程序hello（二进制） hello程序的数据流动过程 数据经常在各存储部件间传递，现代计算机大多采用“缓存技术”。 所有过程都是在CPU执行指令所产生的控制信号的作用下进行的。 开发和运行程序需要什么支撑？ 最早的程序开发很简单 直接输入指令和数据，启动后把第一条指令地址送PC开始执行 用高级语言开发需要复杂的支撑环境 编辑器编写源程序（语言处理系统） 一套翻译转换软件处理各类源程序（语言处理系统） 编译方式：预处理程序、编译器、汇编器、连接器 解释方式：解释程序 需要一个可以执行程序的界面（环境）——人机接口（操作系统） GUI：图形用户界面 CUI：命令行用户界面 支撑程序开发和运行的环境由系统软件提供，最重要的系统软件是操作系统和语言处理系统 计算机系统层次结构早期计算机系统的层次 现代（传统）计算机系统的层次 计算机系统抽象层次的转换 计算机系统的不同用户]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[状态管理与vuex]]></title>
    <url>%2F2018%2F04%2F23%2F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%8Evuex%2F</url>
    <content type="text"><![CDATA[介绍Vuex的设计思想 Vuex把所有组件的所有状态和数据放在同一个内存空间去管理，把它成为state，state的数据可以容易地映射到组件上，来渲染组件，当组件的数据需要发生变化的时候，组件可以通过dispatch一个action，actoin可以做一些异步操作（比如从后端请求数据），action会commit一个mutation（组件里面也可以commit一个mutation），mutation是一个唯一可以修改state的途径，其他任何方式去修改state都是非法的。 使用场景和用来解决哪些问题我们要修改映射在组件上的数据，可以直接在组件内部进行操作；利用Vuex修改数据，要经过action、mutation，修改数据的路径反而会变长。那我们什么时候需要用到Vuex呢？ 可以解决复杂应用的组件数据共享。如果不打算开发大型单页应用，使用Vuex 可能是繁琐冗余的。如果您的应用够简单，最好不要使用Vuex。一个简单的 global event bus 就足够您所需了。但是，如果构建一个中大型单页应用，Vuex将会成为自然而然的选择。因为它可以解决多个组件之间的状态共享，如果一些组件是兄弟组件甚至时关联度很低的组件，我们要共享他们的数据就比较困难。 可以解决路由间的复杂数据传递，当遇到路由跳转，场景需要传递的参数很复杂的时候，用Vuex传递数据就比较好。 基本用法安装和配置首先通过npm安装Vuex：npm install --save vuex 在main.js里，通过Vue.use()使用Vuex： 1234567891011121314151617181920import Vue from 'vue';import VueRouter from 'vue-router';import Vuex from 'vuex';import App from './app.vue';Vue.use(VueRouter);Vue.use(Vuex);// 路由配置省略const store = new Vuex.Store(&#123; // vuex的配置&#125;);new Vue(&#123; el: '#app', router, store, render: h =&gt; h(App)&#125;) state仓库store包含了应用的数据（状态）和操作过程。Vuex里的数据都是响应式的，任何组件使用同一store的数据时，只要store的数据变化，对应的组件也会立即更新。 数据保存在Vuex选项的state字段内，比如： 12345const store = new Vuex.Store(&#123; state: &#123; count: 0 &#125;&#125;); 在任何组件中，可以直接通过$store.state.count来读取： 12345&lt;template&gt; &lt;div&gt; &#123;&#123;$store.state.count&#125;&#125; &lt;/div&gt;&lt;/template&gt; 直接写在template里显得有点乱，可以用一个计算属性来表示： 1234567891011121314&lt;template&gt; &lt;div&gt; &#123;&#123;count&#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; count() &#123; return $store.state.count; &#125; &#125; &#125;&lt;/script&gt; 现在组件中的计数0已经可以显示出来了。 mutations在组件内，来自store的数据只能读取，不能手动改变，改变store中数据的唯一途径就是显示地提交mutations。 mutations是Vuex的第二个选项，用来直接修改state里面的数据： 12345678910111213const store = new Vuex.Store(&#123; state: &#123; count: 0 &#125;, mutations: &#123; increment (state) &#123; state.count ++; &#125;, decrease (state) &#123; state.count --; &#125; &#125;&#125;) 在组件中，通过this.$store.commit方法来执行mutations： 123456789101112131415161718192021222324&lt;template&gt; &lt;div&gt; &#123;&#123;count&#125;&#125; &lt;button @click="handleIncreasement"&gt;+1&lt;/button&gt; &lt;button @click="handleDecrease"&gt;-1&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; count() &#123; return $store.state.count; &#125; &#125;, methods: &#123; handleIncreasement () &#123; this.$store.commit('increment'); &#125;, handleDecrease () &#123; this.$store.commit('decrease'); &#125; &#125; &#125;&lt;/script&gt; 组件只负责提交一个事件名，Vuex对应的mutations来完成业务逻辑。 mutations还可以接受第二个参数，可以是数字、字符串或对象等类型。 123456// main.js省略部分代码mutations: &#123; increment (state， n = 1) &#123; state.count += n; &#125;&#125; 12345678&lt;script&gt; export default &#123; methods: &#123; handleIncreasementMore () &#123; this.$store.commit('increment', 5); &#125; &#125;&lt;/script&gt; 提交mutation的另一种方式时直接使用包含type属性的对象： 123456// main.jsmutations: &#123; increment (state， params) &#123; state.count += params.count; &#125;&#125; 12345// index.vuethis.$store.commit(&#123; type: 'increment', count: 10&#125;) 注意：mutation里不要异步操作数据。如果异步操作数据了，组件在commit后，数据不能立即改变，而且不知道什么时候会改变。可以在action里处理异步，后面再讲。 在写mutation的时候，一个state内的属性对应一个mutation，也就是要体现出mutation的原子性，可以提高它的复用性，比如： 1234567891011121314const mutations = &#123; setId(state, id) &#123; state.course_id = id; &#125;, setInfo(state, info) &#123; state.info = info; &#125;, setComments(state, comments) &#123; state.comments = state.comments.concat(comments); &#125;, setHotComments(state, hot_comments) &#123; state.hot_comments = state.hot_comments.concat(hot_comments); &#125;&#125;; 高级用法getters有这样的场景：Vuex定义了某个数据list，它是一个数组： 123456// main.jsconst store = new Vuex.Store(&#123; state: &#123; list: [1, 5, 8, 10, 30, 50] &#125;&#125;) 如果只想得到小于10的数据，可以在组件的计算属性里进行过滤： 1234567891011121314&lt;template&gt; &lt;div&gt; &#123;&#123; list &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; list() &#123; return $store.state.list.filter(item =&gt; item &lt; 10); &#125; &#125; &#125;&lt;/script&gt; 这样写完全没有问题。但如果还有其他的组建也需要过滤后的数据时，就得把computed的代码完全复制一份，而且需要修改过滤的方法时，每个用到的组件都得修改，这明显不是我们期望的结果，如果将computed的方法也提取出来就好了，getters就是来做这件事的： 12345678910// main.jsconst store = new Vuex.Store(&#123; state: &#123; list: [1, 5, 8, 10, 30, 50] &#125;, getters: &#123; filteredList: state =&gt; &#123; return $store.state.list.filter(item =&gt; item &lt; 10); &#125; &#125; 1234567891011121314&lt;template&gt; &lt;div&gt; &#123;&#123; list &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; list() &#123; return $store.getters.filteredList; &#125; &#125; &#125;&lt;/script&gt; getters也可以以来其他的getter，把getter时作为第二个参数： 12345678910111213// main.jsconst store = new Vuex.Store(&#123; state: &#123; list: [1, 5, 8, 10, 30, 50] &#125;, getters: &#123; filteredList: state =&gt; &#123; return $store.state.list.filter(item =&gt; item &lt; 10); &#125;, listCount: (state, getters) =&gt; &#123; return getters.filteredList.length; &#125; &#125; 在我看来，getters的作用就像是组件内的计算属性，用mutation单纯的为state内的属性赋值，保持mutation赋值的原始性，用getters作计算属性过滤。 actions上面说过，mutation里不应该异步操作数据，所以有了action选项。action与mutation很像，不同的是action里面提交的是mutation，并且可以异步操作逻辑。 action在组件内通过$store.dispatch触发，例如： 12345678910111213141516// main.jsconst store = new Vuex.Store(&#123; state: &#123; count: 0 &#125;, mutations: &#123; increment (state, n = 1) &#123; state.count += n; &#125; &#125;, actions: &#123; increment (context) &#123; context.commit('increment'); &#125; &#125;&#125;) 1234567891011121314151617181920&lt;template&gt; &lt;div&gt; &#123;&#123; count &#125;&#125; &lt;button @click="handleActionIncrement"&gt;action +1&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; count() &#123; return this.$store.state.count; &#125; &#125;, methods: &#123; handleActionIncrement () &#123; this.$store.dispatch('increment'); &#125; &#125; &#125;&lt;/script&gt; 这样看来显得有些多此一举，但是加了异步就不一样了，我们可以用一个Promise在1秒后提交mutation： 123456789101112131415161718192021// main.jsconst store = new Vuex.Store(&#123; state: &#123; count: 0 &#125;, mutations: &#123; increment (state, n = 1) &#123; state.count += n; &#125; &#125;, actions: &#123; asyncIncrement (context) &#123; return new Promise(resolve =&gt; &#123; setTimeout (() =&gt; &#123; contex.commit('increment'); resolve(); &#125;, 1000) &#125;); &#125; &#125;&#125;) 12345678910111213141516171819202122&lt;template&gt; &lt;div&gt; &#123;&#123; count &#125;&#125; &lt;button @click="handleAsyncIncrement"&gt;async +1&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; computed: &#123; count() &#123; return this.$store.state.count; &#125; &#125;, methods: &#123; handleAsyncIncrement () &#123; this.$store.dispatch('asyncIncrement').then(() =&gt; &#123; console.log(this.$store.state.count); // 1 &#125;); &#125; &#125; &#125;&lt;/script&gt; Vuex使用的时候，涉及到改变数据的，就使用mutations，存在业务逻辑的，就用action。 上面也讲到，当需要异步获取网络数据的时候，一定得写在action中，得到了数据后才能提交mutation，起到改变state属性的效果。 实战中，或许我们会遇到一个问题：有多个网络请求，而且业务中需要我们做的是先请求到所有的数据，才能提交mutation对state中的属性进行“集体”的赋值，比如页面切换的时候，同时渲染出所有的数据模块会带来较好的体验感，另外要求我们的网络异步请求必须是同时发出的。 这里可以用到Promise.all对那几个异步网络请求进行封装，比如： 12345678910111213141516const actions = &#123; fetchAll(&#123; commit &#125;, id) &#123; commit("setId", id); Promise.all([ DetailService.getInfo(state.course_id), DetailService.getComments(state.course_id, state.page), DetailService.getHotComments(state.course_id) ]).then(value =&gt; &#123; preprocess(value[1]); preprocess(value[2]); commit("setInfo", value[0]); commit("setComments", value[1]); commit("setHotComments", value[2]); &#125;); &#125;&#125; Promise.all的作用就是当参数（一个promise数组）中所有的promise都resolve，它才resolve。看上面这个例子很明显了。hexo modulesmodules将store分割到不同的模块。当项目足够大时，store里的state、getters、mutations、actions会非常多，都放在main.js里显得不是很友好，使用modules可以把它们写到不同的文件中。每个modules拥有自己的state、getters、mutations、actions，而且可以多层嵌套： 12345678910111213141516171819const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;) 参考资料官方文档]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue使用slot分发内容]]></title>
    <url>%2F2018%2F04%2F18%2Fvue%E4%BD%BF%E7%94%A8slot%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[以&lt;app&gt;为例，它有两个特点： &lt;app&gt;组件不知道它的挂载点会有什么内容。挂载点的内容是由&lt;app&gt;的父组件决定的。 &lt;app&gt;组件可能有它自己的模板 props传递数据，events触发事件和slot内容分发就构成了Vue组件的3个API来源，再复杂的组建也是由这三个部分组成。 slot用法单个slot在子组件内使用特殊的&lt;slot&gt;元素可以为这个子组件开启一个slot（插槽），在父组件模板里，插入在子组件标签内的所有内容将替代子组件的&lt;slot&gt;标签及它的内容，实例： 123456789101112131415161718&lt;div id="app"&gt; &lt;child-component&gt; &lt;p&gt;分发的内容&lt;/p&gt; &lt;p&gt;更多分发的内容&lt;/p&gt; &lt;/child-component&gt;&lt;/div&gt;&lt;script&gt; Vue.component('child-component',&#123; template: `&lt;div&gt; &lt;slot&gt; &lt;p&gt;如果父组件没有插入内容，我将作为默认出现&lt;/p&gt; &lt;/slot&gt;&lt;/div&gt;` &#125;) var app = new Vue(&#123; el: '#app' &#125;)&lt;/script&gt; 子组件的模板内定义了一个&lt;slot&gt;元素，并用一个p作为默认的内容，在父组件没有使用slot时，会渲染这段默认的文本；如果写入了&lt;slot&gt;，那就会替换整个&lt;slot&gt;。 演示地址 具名slot给&lt;slot&gt;元素指定一个name后可以分发多个内容，具名slot可以与单个slot共存，例如： 123456789101112131415161718192021222324252627&lt;div id="app"&gt; &lt;child-component&gt; &lt;p&gt;正文内容&lt;/p&gt; &lt;p&gt;更多正文内容&lt;/p&gt; &lt;div slot="footer"&gt;底部信息&lt;/div&gt; &lt;h2 slot="header"&gt;标题&lt;/h2&gt; &lt;/child-component&gt;&lt;/div&gt;&lt;script&gt; Vue.component('child-component', &#123; template: `&lt;div class="container"&gt; &lt;div class="header"&gt; &lt;slot name="header"&gt;&lt;/slot&gt; &lt;/div&gt; &lt;div class="main"&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt; &lt;div class="footer"&gt; &lt;slot name="footer"&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/div&gt;`&#125;) var app = new Vue(&#123; el: '#app' &#125;)&lt;/script&gt; 子组件内声明了3个&lt;slot&gt;元素，其中在&lt;div class=&quot;main&quot;&gt;内的&lt;slot&gt;没有使用name特性，它将作为默认slot出现，父组件没有使用slot特性的元素与内容都将会出现在这里。 演示地址 如果没有指定默认的匿名slot，父组件内多余的内容片段都将会被抛弃。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java web项目实践]]></title>
    <url>%2F2018%2F04%2F16%2Fjavaweb%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[参考Servlet+web.xml配置 连接数据库：需要在lib中添加依赖 搭建java web的开发环境 jdk环境 tomcat服务器 Eclipes tomcat简介tomcat是apache的一个开源项目，是一种常见的web服务器，jsp/servelet的容器。安装成功之后，运行omcat/bin/startup.sh, windows下是运行startup.bat。访问localhost:8080。是一个带有猫的页面，证明成功。 tomcat服务器目录结构/bin ：binary(二进制的缩写)，存放各种平台下启动和停止tomcat的命令文件，如startup.bat，shutdown.bat /conf：存放tomcat的各种配置文件 /lib：存放tomcat服务器所需的第三方驱动各种jar文件 /log：存放在tomcat的日志文件 /temp：tomcat运行时用于存放临时文件 /webapps：当发布web应用时，默认会将web应用的文件发布到此目录中 /work：tomcat把由jsp生成的servlet放在此目录下 第一个java web项目（手动）初始化 在webapps中创建项目目录，比如webapps/myhome 编写index.jsp 创建WEB-INF目录 运行 能够访问localhost:8080/myhome/index.jsp WEB-INF目录结构 WEB-INF是java的web应用的安全目录。—也就是客户端无法访问，只有服务端可以访问的目录。 web.xml：项目部署文件。 classes文件夹，用来放置*.class文件。 lib文件夹，用来存放需要的jar包。 eclipes集成tomcat环境配置： 配jre进入preference =&gt; java =&gt; install jres配置（推荐你自己安装的jre） 集成tomcat进入preference =&gt; server =&gt; runtime enviroment 使用eclipes编写第一个web程序new =&gt; project =&gt; web =&gt; dynamic web project 创建一个名叫mytest的项目 默认会产生一些项目结构。 在其中的WebRoot(或者WebContent)根目录内创建index.jsp, 在里面可以写一个hello world测试一下。 保存之后点击tab栏中的运行tomcat，（第一次运行需要选择你对应的tomcat版本），运行之后下面的控制台会给出一系列的提示信息，若没有报错，则可以在浏览器中访问localhost:8080/mytest/index.jsp，就可以看到你写的hello world啦。 修改tomcat服务器默认端口修改conf/server.xml 1234&lt;Connector port="8080" protocol="HTTP/1.1" connectionTomeout="20000" redirectPort="8443"&gt; 修改完后重启tomcat就OK惹。 jsp jsp简介jsp全名为java server pages，其根本是一个简化的servelet设计，他实现了在Java中使用html标签。jsp动态网页技术标准也是javaee的标准。jsp和serbelet一样，是在服务器端执行的。 特点 java平台 安全性高 适合开发大型的，企业级的web应用程序 基础语法指令 page： 通常用于页面的顶端，同一个页面有多个page指令 12&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt; include：讲一个外部文件嵌入到当前jsp文件中，同时解析这个页面中的jsp语句 taglib：使用标签库定义新的自定义标签，在jsp页面中启用定制行为 注释 html注释： 1&lt;!-- --&gt; //客户端不可见 jsp注释 1&lt;%-- --%&gt; //客户端不可见 jsp脚本注释 1234单行注释// 多行注释/**/ jsp脚本 在html中插入jsp脚本 123456&lt;body&gt;true&lt;h1&gt;hello, my first JSP!大家好&lt;/h1&gt;true&lt;% out.println("hello javaee"); %&gt;&lt;/body&gt; jsp声明 在jsp页面中定义变量或方法： 123456&lt;%! String s = "张三"; int add(int x,int y) &#123; return x+y; &#125;%&gt; 表达式 语法： 12你好，&lt;%=s %&gt;&lt;br&gt;x+y=&lt;%=add(2,3) %&gt; jsp页面的生命周期 用户发出请求index.jsp=&gt;判断用户是否是第一次请求=&gt;若是，jsp引擎把该文件转化为一个servelet，生成字节码文件并执行jspInit(),若不是，则直接访问字节码文件=&gt;解析执行，jspService() jspService()方法被调用来处理客户端的请求。对每一个请求，jsp引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求改jsp文件，则jsp引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行可以大大降低系统的资源需求，提高系统的并发量及相应时间。但也要注意多线程带来的同步问题，由于Servelet始终驻于内存，所以相应是非常快的。 阶段项目 分别使用脚本和html打印99乘法表： 1234567891011121314151617181920212223242526&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;true&lt;%! String printMutiTable() &#123; String s = "";truetruetruefor(int i=1;i&lt;=9;i++) &#123;truetruetruetruefor(int j=1;j&lt;=i;j++) &#123; s += i+"*"+j+"="+(i*j)+" "; &#125; s += "&lt;br&gt;"; &#125; return s; &#125; %&gt;true&lt;h1&gt;九九乘法表&lt;/h1&gt;true&lt;hr&gt;true&lt;%=printMutiTable() %&gt;&lt;/body&gt;&lt;/html&gt; jsp内置对象内置对象简介jsp内置对象是web容器创建的一组对象，不使用new关键字就可以使用的内置对象。 例如：123456&lt;%int[] value = &#123;60,70,80&#125;;for(int i:value) &#123;trueout.println(i);&#125;%&gt; 常见的jsp内置对象： out request response session application page/pageContext/exception/config web程序的请求与相应模式用户发送请求（request）服务器给用户相应（response） outout对象是JspWriter类的实例，是向客户端输出内容常量的对象。 常用方法： void println()向客户端打印字符串 void clear()清除缓冲区的内容，如果在flush之后调用会跑出异常 void clearBuffer()清楚缓冲区内容，在flush之后不会抛出异常 void flush()将缓冲区内容输出到客户端 int getBufferSize()返回缓冲区的字节数大小，如果不设缓冲区则为0 int getRemaining()返回缓冲区还有多少可用 boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常 void close()关闭输出流 request/responseget和post区别 get：以明文的方式通过URL提交数据，数据在URL中可以看到。提交的数据最多不超过2kb。安全性较低但是效率比post方式高。适合提交数据量不大、安全性不高的数据，比如搜索、查询。 post：将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高大用户信息，比如注册、修改、上传等。 request对象客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出相应。它是HttpServletRequest类等实例。request对象具有请求域，即完成客户端的请求之前，该对象一直有效。 String getParameter(String name)返回name指定参数的参数值 String[] getParameterValues(String name)返回包含参数name的所有所有值的数组 void setAttribute(String, Object)存储此请求中的属性 object getAttribute(String name)返回指定属性的属性值 String getContentType()得到请求体的mime类型 String getProtocol()返回请求用的协议类型以及版本号 String getServerName()返回接受请求都服务器主机名 1234567891011121314151617181920212223242526272829303132333435&lt;!-- reg.jsp --&gt;&lt;h1&gt;用户注册&lt;/h1&gt;&lt;hr&gt;&lt;form action="request.jsp" method="post" name="regForm"&gt;true&lt;table&gt;truetrue&lt;tr&gt;truetruetrue&lt;td&gt;用户名：&lt;/td&gt;truetruetrue&lt;td&gt;truetruetruetrue&lt;input type="text" name="username"&gt;truetruetrue&lt;/td&gt;truetrue&lt;/tr&gt;truetrue&lt;tr&gt;truetruetrue&lt;td&gt;密码：&lt;/td&gt;truetruetrue&lt;td&gt;truetruetruetrue&lt;input type="password" name="password"&gt;truetruetrue&lt;/td&gt;truetrue&lt;/tr&gt;truetrue&lt;tr&gt;truetruetrue&lt;td&gt;爱好：&lt;/td&gt;truetruetrue&lt;td&gt;truetruetruetrue&lt;input type="checkbox" name="favorite" value="read"&gt;读书truetruetruetrue&lt;input type="checkbox" name="favorite" value="music"&gt;音乐truetruetruetrue&lt;input type="checkbox" name="favorite" value="movie"&gt;电影truetruetruetrue&lt;input type="checkbox" name="favorite" value="internet"&gt;上网truetruetrue&lt;/td&gt;truetrue&lt;/tr&gt;truetrue&lt;tr&gt;truetruetrue&lt;td colspan="2"&gt;truetruetruetrue&lt;input type="submit" value="提交"&gt;truetruetrue&lt;/td&gt;truetrue&lt;/tr&gt;true&lt;/table&gt;&lt;/form&gt;&lt;hr&gt;&lt;a href="request.jsp?username=哈哈&amp;password=123"&gt;测试url传递参数&lt;/a&gt; 123456789101112131415161718192021222324252627282930313233&lt;!-- request.jsp --&gt;&lt;h1&gt;request 内置对象&lt;/h1&gt;&lt;% request.setCharacterEncoding("utf-8"); // 解决中文乱码问题，无法解决URL传递中文乱码问题。 request.setAttribute("sex","男"); %&gt;用户名：&lt;%=request.getParameter("username") %&gt;密码：&lt;%=request.getParameter("password") %&gt;爱好：&lt;% if(request.getParameterValues("favorite")!=null) &#123; String[] favorites = request.getParameterValues("favorite");truetruetruefor(int i=0;i&lt;favorites.length;i++) &#123;truetruetruetrueout.println(favorites[i]);truetruetrue&#125;truetrue&#125;true %&gt;性别：&lt;%=request.getAttribute("sex") %&gt;&lt;br&gt;请求体都mime类型：&lt;%=request.getContentType() %&gt;&lt;br&gt;协议类型以及版本号：&lt;%=request.getProtocol() %&gt;&gt;&lt;br&gt;服务器都主机名：&lt;%=request.getServerName() %&gt;服务器端口号：&lt;%=request.getServerPort() %&gt;&lt;br&gt;请求客户端都IP地址：&lt;%=request.getRemoteAddr() %&gt;&lt;br&gt;请求都真实路径：&lt;%=request.getRealPath("request.jsp") %&gt;&lt;br&gt;请求的上下文路径：&lt;%=request.getContextPath() %&gt; 123&lt;!-- server.xml --&gt;&lt;!-- URIEncoding="utf-8"解决url传递中文乱码问题 --&gt;&lt;Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" URIEncoding="utf-8"/&gt; response对象response对象包含了相应客户请求的有关信息，但在jsp中很少直接用它。它是HttpServletResponse类的实力。response对象具有页面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其他页面的response对象对当前页面无效。常用方法： String getCharacterEncoding()返回相应用的是何种字符编码 void setContentType(String type)设置相应的mime类型 PrintWriter getWriter()返回可以想客户端输出字符的一个对象 sendRedirect(java.lang.String location)重新定向客户端的请求 123456789&lt;%@ page language="java" import="java.util.*,java.io.*" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;&lt;% response.setContentType("text/html;charset=utf-8");//设置相应的mime类型trueout.println("&lt;h1&gt;response内置对象&lt;/h1&gt;");truePrintWriter outer = response.getWriter();//获得输出流对象trueout.println("大家好，我是response对象生产的输出流outer对象"); response.sendRedirect("reg.jsp");%&gt; 请求转发与请求重定向 请求重定向：客户端行为，response.sendRedirect()，从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL会改变。 请求转发：服务器行为，request.getRequestDispatcher().forward(req,resp);是一次请求，转发后请求对象会保存，地址栏URL不会改变。 session什么是session session表示客户端与服务器的一次会话。 web中的session指的是用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。 从上述定义来看，session实际上时一个特定的时间概念。 在服务器的内存中保存着不同用户的session。 session对象 是一个jsp内置对象 session对象在第一个jsp页面被装载时自动创建，完成会话期管理。 从一个客户打开浏览器并连接到服务器开始，到关闭浏览器离开这个服务器结束，被称为一个会话。 当一个客户访问一个服务器时，可能会在服务器的几个页面之间切换，服务器应当通过某种方法知道这是一个客户，就需要session对象。 session对象时HttpSession类的实例。 session对象常用方法： long getCreationTime()：返回session创建时间（ms） public String getId()：返回session创建时jsp引擎为它设的唯一id号 public Object setAttribute(String name, Object value)：使用指定名称将对象绑定到此对话 public Object getAttribute(String name)：返回与此对话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null String[] getValueNames()：返回一个包含此session中所有可用属性的数组 int getMaxInactiveInterval()：返回两次请求间隔多长时间此session被取消 session的生命周期 创建：当客户端第一次访问某个jsp或者servlet时候，服务器会为当前会话创建一个SessionId，每次客户端向服务端发送请求时，都会将此SessionId携带过去，服务端会对此SessionId进行校验。 活动：除非本次会话的所有页面都关闭后再重新访问某个jsp或者servlet将会创建新的会话。 销毁：1、session.invalidate() 2、Session过期 3、服务器重启 application其他内置对象项目案例]]></content>
      <categories>
        <category>数据库与后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue双向数据绑定实现原理]]></title>
    <url>%2F2018%2F04%2F12%2Fvue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[如何追踪变化我们先来看一个简单的例子。代码示例如下 1234567891011121314151617181920&lt;div id="main"&gt; &lt;h1&gt;count: &#123;&#123;times&#125;&#125;&lt;/h1&gt;&lt;/div&gt;&lt;script src="vue.js"&gt;&lt;/script&gt;&lt;script&gt; var vm = new Vue(&#123; el: '#main', data: function () &#123; return &#123; times: 1 &#125;; &#125;, created: function () &#123; var me = this; setInterval(function () &#123; me.times++; &#125;, 1000); &#125; &#125;);&lt;/script&gt; 运行后，我们可以从页面中看到，count 后面的 times 每隔 1s 递增 1，视图一直在更新。在代码中仅仅是通过 setInterval 方法每隔 1s 来修改 vm.times 的值，并没有任何 DOM 操作。那么 Vue.js 是如何实现这个过程的呢？我们可以通过一张图来看一下，如下图所示：1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图4、mvvm入口函数，整合以上三者 实现Observer我们知道可以利用Obeject.defineProperty()来监听属性变动。比如： 1234567891011121314151617181920&lt;body&gt; &lt;input type="text" id="a"&gt; &lt;div id="b"&gt;&lt;/div&gt;&lt;script&gt; function $(id) &#123; return document.getElementById(id) &#125; var obj = &#123;&#125; Object.defineProperty(obj, 'hello', &#123; set: function (newVal) &#123; $("a").value = newVal $("b").innerHTML = newVal &#125; &#125;) $("a").addEventListener("keyup", function(e) &#123; obj.hello = e.target.value console.log("敲键盘了,键值是",e.target.value) &#125;)&lt;/script&gt;&lt;/body&gt; 此例实现的效果是：随文本框输入文字的变化，span 中会同步显示相同的文字内容；在js或控制台显式的修改 obj.hello 的值，视图会相应更新。这样就实现了 model =&gt; view 以及 view =&gt; model 的双向绑定。 那么将需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化。相关代码可以是这样： 12345678910111213141516171819202122232425262728var data = &#123;name: 'kindeng'&#125;;observe(data);data.name = 'dmq'; // 哈哈哈，监听到值变化了 kindeng --&gt; dmqfunction observe(data) &#123; if (!data || typeof data !== 'object') &#123; return; &#125; // 取出所有属性遍历 Object.keys(data).forEach(function(key) &#123; defineReactive(data, key, data[key]); &#125;);&#125;;function defineReactive(data, key, val) &#123; observe(val); // 监听子属性 Object.defineProperty(data, key, &#123; enumerable: true, // 可枚举 configurable: false, // 不能再define get: function() &#123; return val; &#125;, set: function(newVal) &#123; console.log('哈哈哈，监听到值变化了 ', val, ' --&gt; ', newVal); val = newVal; &#125; &#125;);&#125; 利用DocumentFragmentDocumentFragment（文档片段）可以看作节点容器，它可以包含多个子节点，当我们将它插入到 DOM 中时，只有它的子节点会插入目标节点，所以把它看作一组节点的容器。使用 DocumentFragment 处理节点，速度和性能远远优于直接操作 DOM。Vue 进行编译时，就是将挂载目标的所有子节点劫持（真的是劫持，通过 append 方法，DOM 中的节点会被自动删除）到 DocumentFragment 中，经过一番处理后，再将 DocumentFragment 整体返回插入挂载目标。 123456789101112131415161718192021222324&lt;body&gt; &lt;div id="app"&gt; &lt;input type="text" id="a"&gt; &lt;div id="b"&gt;&lt;/div&gt; &lt;/div&gt;&lt;script&gt; function $(id) &#123; return document.getElementById(id) &#125; var realNode = $("app") function nodeToFragment(node) &#123; var frag = document.createDocumentFragment() while(node.firstChild) &#123; frag.appendChild(node.firstChild) &#125; return frag &#125; var fragDom = nodeToFragment(realNode) console.log(fragDom) setTimeout(function() &#123; realNode.appendChild(fragDom) &#125;,2000)&lt;/script&gt;&lt;/body&gt; 分解任务我们最终要实现input和文本的数据绑定 1234&lt;div id="app"&gt; &lt;input type="text" v-model="text"&gt; &#123;&#123;text2&#125;&#125; &lt;/div&gt; 123456var vm = new Vue(&#123; el: 'app', data: &#123; text: 'hello world' &#125; &#125;); 首先将该任务分成几个子任务： 1、输入框以及文本节点与 data 中的数据绑定 2、输入框内容变化时，data 中的数据同步变化。即 view =&gt; model 的变化。 3、data 中的数据变化时，文本节点的内容同步变化。即 model =&gt; view 的变化。 数据初始化绑定1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// 将vm里面对应的值赋给node节点对应的v-model属性值以及用&#123;&#123;&#125;&#125;包含的值function compile (node, vm) &#123; // 正则匹配双括号之间的字符串 var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/ // 节点类型为元素 if(node.nodeType === 1) &#123; var attr = node.attributes // 解析属性 for(let i=0;i&lt;attr.length;i++) &#123; if(attr[i].nodeName == 'v-model') &#123; // 获取v-model绑定都属性名 var name = attr[i].nodeValue // 将data中对应该属性名的值赋给这个节点的value node.value = vm.data[name] node.removeAttribute('v-model') &#125; &#125; // 解析内容 if(reg.test(node.innerHTML)) &#123; var name = RegExp.$1 // 获取匹配到的字符串 name = name.trim() // 清除两端都空白字符 // 将data中对应的属性名的值赋给这个节点 node.innerHTML = vm.data[name] &#125; &#125; // 节点类型为text if (node.nodeType === 3) &#123; console.log(node.nodeValue) if (reg.test(node.nodeValue)) &#123; var name = RegExp.$1 // 获取匹配到的字符串 name = name.trim() // 清除两端都空白字符 // 将data中对应的属性名的值赋给这个节点 node.nodeValue = vm.data[name] &#125; &#125;&#125;function $(id) &#123; return document.getElementById(id)&#125;function nodeToFragment(node ,vm) &#123; var frag = document.createDocumentFragment() var child while(child = node.firstChild) &#123; // 初始化child节点 compile(child,vm) // 将child节点劫持到文档片段中 frag.appendChild(child) &#125; return frag&#125;function Vue(option) &#123; this.data = option.data var id = option.el var dom = nodeToFragment($(id),this) $(id).appendChild(dom)&#125;var vm = new Vue(&#123; el: 'app', data: &#123; text: 'hello world', text2: 'hello world2', &#125;&#125;); 响应式的数据绑定我们刚刚实现了初始化时数据和视图的绑定，接下来要实现view =&gt; model的变化实现思路：当我们在输入框输入数据的时候，首先触发 input 事件（或者 keyup、change 事件），在相应的事件监听程序中，我们获取输入框的 value 并赋值给 vm 实例的 text 属性。我们会利用 defineProperty 将 data 中的 text 设置为 vm 的访问器属性，因此给 vm.text 赋值，就会触发 set 方法。在 set 方法中主要做两件事，第一是更新属性的值，第二留到任务三再说。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576function compile (node, vm) &#123; var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/ if(node.nodeType === 1) &#123; var attr = node.attributes for(let i=0;i&lt;attr.length;i++) &#123; if(attr[i].nodeName == 'v-model') &#123; console.log(attr[i].nodeValue) var name = attr[i].nodeValue // 监听器 node.addEventListener('input', function(e) &#123; vm[name] = e.target.value &#125;) node.value = vm[name] console.log(node) node.removeAttribute('v-model') &#125; &#125; &#125; if(node.nodeType === 3) &#123; if(reg.test(node.nodeValue)) &#123; var name = RegExp.$1 name = name.trim() node.nodeValue = vm[name] &#125; &#125;&#125;function nodeToFragment(node ,vm) &#123; var frag = document.createDocumentFragment() var child while(child = node.firstChild) &#123; // 初始化child节点 compile(child,vm) // 将child节点劫持到文档片段中 frag.appendChild(child) &#125; return frag&#125;// 给obj添加值为val的key监听属性function defineReactive(obj, key, val) &#123; Object.defineProperty(obj, key, &#123; get: function () &#123; return val &#125;, set: function (newVal) &#123; if(newVal === val) return val = newVal console.log(val) &#125; &#125;)&#125;// 将obj的所有属性全部添加到vm中function observe(obj, vm) &#123; Object.keys(obj).forEach(function(key) &#123; defineReactive(vm, key, obj[key]) &#125;)&#125;function Vue(options) &#123; this.data = options.data var data = this.data // 将data中的属性全部通过Obeject.defineProperty()直接添加到vue对象中 observe(data, this) var id = options.el var dom = nodeToFragment($(id),this) $(id).appendChild(dom)&#125;var vm = new Vue(&#123; el: 'app', data: &#123; text: 'hello world', &#125;&#125;); 通过控制台的结果可以看出，当修改了view层的value，model层对应的data属性也发生了变化。 订阅/发布模式model层的属性变化了，但是变化的属性并没有发布出去，还是没有变，这里又有一个知识点：订阅发布模式。 订阅发布模式（又称观察者模式）定义了一种一对多的关系，让多个观察者同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察者对象。 发布者发出通知 =&gt; 主题对象收到通知并推送给订阅者 =&gt; 订阅者执行相应操作： 1234567891011121314151617181920212223242526// 一个发布者var pub = &#123; publish: function() &#123; dep.notify() &#125;&#125;// 三个订阅者var sub1 = &#123; update: function() &#123;console.log(1)&#125;&#125;var sub2 = &#123; update: function() &#123;console.log(2)&#125;&#125;var sub3 = &#123; update: function() &#123;console.log(3)&#125;&#125;// 一个主题对象function Dep() &#123; this.subs = [sub1, sub2, sub3]&#125;Dep.prototype.notify = function() &#123; this.subs.forEach(function(sub) &#123; sub.update() &#125;)&#125;// 发布者发布消息，主题对象执行notify方法，进而触发订阅者执行update方法var dep = new Dep()pub.publish() // 1,2,3 知道了订阅者和发布者的关系之后，不难看出，view层带有绑定数据的节点是订阅者，属性自身当触发set之后，会作为发布者发出通知让订阅者做出改变。 双向绑定的实现]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rax(3)-关于样式]]></title>
    <url>%2F2018%2F03%2F18%2FRax(3)-%E5%85%B3%E4%BA%8E%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[基础在Rax中，我们可以利用js定义样式，与原生的html的style标签不同，Rax元件接收的style属性类型是一个对象。比如：12345678910111213141516171819202122// 定义样式集合const styles = &#123; container: &#123; padding: '20rem', height: '300rem', fontSize: '28rem', backgroundColor: 'red' &#125;, container_title: &#123; color: '#fff', fontSize: '32rem' // font-size不会继承父或祖先元素，需重新定义 &#125;&#125;;// 应用样式const App = (props) =&gt; &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.container_title&#125;&gt;Hello World&lt;/Text&gt; &lt;/View&gt; );&#125;; 受于Native元素渲染方式，元件之间的嵌套关系并不会带来样式继承的效果，因此需要格子描述对应元素的样式。 单位规范我们推荐使用不加单位的写法：12345678910&lt;View style=&#123;styles.container&#125;&gt; &lt;Text&gt;hello world&lt;/Text&gt;&lt;/View&gt;const styles = &#123; container: &#123; background: 'grey', width: 375 &#125;&#125;; 1个单位的大小为屏幕宽度的1/750，这样做的好处是当你拿到一份750px宽的视觉稿，你再也不需要去做人工换算。 布局在Weex/Rax中，不再支持float布局，取而代之的是flexbox布局 分离式代码Rax提供了一个Webpack插件——stylesheet-loader，让我们能够在Rax应用中通过CSS写样式。 12345678910111213/* hello-world.css */.container &#123; padding: 20rem; height: 300rem; background-color: red;&#125;.container_title &#123; color: #fff; font-size: 32rem; border-width: 1px;&#125; 引入12/* hello-world.js */import styles from './hello-world.css'; webpack配置1234&#123; test: /\.css$/, loader: 'stylesheet'&#125; 除了样式代码的分离，少写几个引号之外，stylesheet-loader的好处还在于： 对于Wexx不支持的样式，能快速的给予友好的warning提示 可以跟sass/less-loader结合，使用变量、mixin、嵌套等预编译功能 warning提示：比如：Weex不支持float、z-index样式，那么stylesheet-loader会提示。 参考资料Rax深入浅出 – 样式编写]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Rax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rax(2)-关于JSX]]></title>
    <url>%2F2018%2F03%2F18%2FRax(2)-%E5%85%B3%E4%BA%8EJSX%2F</url>
    <content type="text"><![CDATA[介绍JSX考虑这个变量的声明：1const element = &lt;h1&gt;Hello, world!&lt;/h1&gt; 这种有趣的标签语法既不是一个字符串也不是html。它叫JSX，是JavaScript扩展的语法。 在JSX中嵌入表达式可以将任何JavaScript表达式放在大括号内嵌入进JSX。12345678910111213141516171819function formatName(user) &#123; return user.firstname + ' ' + user.lastname;&#125;const user = &#123; firstName: 'Harper', lastName: 'Perez'&#125;;const element = ( &lt;h1&gt; Hello, &#123;formatName(user)&#125;! &lt;/h1&gt;);ReactDOM.render( element, document.getElementById('root')); JSX也是一个表达式编译之后，JSX表达式变成常规的JavaScript函数调用为对象。 这就意味着，你可以在if语句、for循环中使用JSX，可以把它分配给变量、让它成为参数传递、或者是函数的返回值。 123456function getGreeting(user) &#123; if (user) &#123; return &lt;h1&gt;Hello, &#123;formatName(user)&#125;!&lt;/h1&gt;; &#125; return &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;&#125; JSX的含义JSX只是JavaScript语法的一个语法映射。JSX表达式执行函数调用，我们可以看成他就是调用 createElement() 方法的快捷方式。 Babel 内置的支持 JSX 语法的编译。在代码中声明 @jsx可以定制相应的函数调用： 123456// Tell Babel to transform JSX into createElement() calls: /* @jsx createElement */ import &#123; createElement &#125; from 'rax'; &lt;View /&gt; // =&gt; createElement(View) 参考资料learn-jsx]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Rax</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rax(1)-入门]]></title>
    <url>%2F2018%2F03%2F18%2FRax(1)-%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[初步了解 Weex是什么 官方描述：一个构建移动端跨平台（Web/IOS/Android）UI框架。 Weex官网 Rax是什么 官方描述：一个通用的跨容器（Browser/Native/Node）的渲染引擎 Rax官网 工具安装创建和管理一个Rax apps，你得安装：Node.js, Rax CLI 和 Weex Playground App. node：版本号至少为4.0 Weex Playground App : Weex Native 运行时实例 &amp; Weex 文件预览工具，这里下载。 Rax CLI：Rax提供的脚手架工具，在终端执行如下命令安装：1$ npm install -g rax-cli 开始第一个项目创建一个名为hello-world的文件夹，利用Rax CLI工具创建一个新的application，安装需要的依赖。12345678910111213141516rax init hello-worldCreating a new Rax project in /Users/anonymous/hello-worldInstall dependencies:...To run your app: cd hello-world npm run start```$ cd hello-world/Users/anonymous/hello-world|-- README.md|-- node_modules|-- package.json|-- public|-- src`-- webpack.config.js改变路径到你的新项目 跑rax init之后，会自动在项目路径当中创建一系列文件： src/index.js 是Rax app的入口。 package.json定义了项目所需要的各种模块，它告诉npm如何安装外部依赖，比如rax和rax-component库。 使用npm run start命令开启本地预览，终端会显示两个二维码，通过weex playground app扫描第二个可以访问该地址。 Hello World1234567891011121314151617181920212223242526272829//顶层APIimport &#123;createElement, Component&#125; from 'rax';//元件引用import View from 'rax-view';import Text from 'rax-text';//import &#123;View, Text&#125; from 'rax-components';//rax-components需要自行安装//引用样式import styles from './App.css';//定义组件class App extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.app&#125;&gt; &lt;View style=&#123;styles.appHeader&#125;&gt; &lt;Text style=&#123;styles.appBanner&#125;&gt;Welcome to Rax&lt;/Text&gt; &lt;/View&gt; &lt;Text style=&#123;styles.appIntro&#125;&gt; To get started, edit src/App.js and save to reload. &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;//渲染export default App; 参考资料Rax Github]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Rax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6模块化]]></title>
    <url>%2F2018%2F03%2F15%2FES6%E6%A8%A1%E5%9D%97%E5%8C%96%2F</url>
    <content type="text"><![CDATA[Modules in JavaScript 模块化是指将一个复杂的系统分解为多个模块以方便编码。当项目变大时，需要用模块化的思想来组织代码。 在ES6之前，对于模块（module）系统是没有明确的语言支持的，无法将一个大程序拆分成互相依赖的小文件。令人印象深刻的是社区制定了两种主要的模块化规范：CommonJS和AMD，前者用于服务器，后者用于浏览器。 ES6模块化提出之后，实现了模块功能而起相当简单，逐渐取代之前的两种规范，因为它同时具有CommonJS简练的语法（for single exports and support for cyclic dependencies）和AMD的可异步加载依赖。并且具有在语法上比CommonJS更简练、更支持循环依赖等优点。 exportexport的具体用法参照这里，其实就两种export：named exports (several per module) and default exports (one per module)，从一个模块里可以有多个不同命名的exports输出，但是只有一个default export。 Named export (several per module)一个模块输出多个exports 12345678910111213//------ lib.js ------export const sqrt = Math.sqrt;export function square(x) &#123; return x * x;&#125;export function diag(x, y) &#123; return sqrt(square(x) + square(y));&#125;//------ main.js ------import &#123; square, diag &#125; from 'lib';console.log(square(11)); // 121console.log(diag(4, 3)); // 5 符号*代表所有模块所以main.js也可以改成：1234//------- main.js -----import * as lib from 'lib';console.log(lib.square(11)); // 121console.log(lib.diag(4, 3)); // 5 Default exports (one per module)export default命令用于制定模块的默认输出，一个模块只能有一个默认输出，因此export default只能使用一次。12345678910111213//------ myFunc.js ------export default function () &#123;&#125; // no semicolon!//------ main1.js ------import myFunc from 'myFunc';myFunc();//------ MyClass.js ------export default class &#123;&#125; // no semicolon!//------ main2.js ------import MyClass from 'MyClass';const inst = new MyClass(); 要注意:export default…后面没有分号！ 原理：默认导出可以理解为宁一种形式的命名导出，它使用的名称叫default。 export default主要的两种风格1.元素声明（Labeling declarations） 2.直接输出值（Default-exporting values directly） 第一种风格：边声明边输出1234567export default function foo() &#123;&#125; // no semicolon!export default class Bar &#123;&#125; // no semicolon!// 加载时都视为匿名函数//或者使用匿名函数export default function () &#123;&#125; // no semicolon!export default class &#123;&#125; // no semicolon! 第二种风格：直接输出值（这些值都是经由表达式产生）12345export default 'abc';export default foo();export default /^xyz$/;export default 5 * 7;export default &#123; no: false, yes: true &#125;; 12// 格式：export default «expression»; import使用export命令定义了模块的对外接口之后，其他js文件就可以通过import命令加载这个模块。 命名式输入123import &#123;变量1, 变量2, ...&#125; from 'url';import &#123;变量名 as 重命名&#125; from 'url';// 变量名必须和被导入的变量名相同 默认输入12import 任意变量名 from 'url';// 因为只可能有一个默认输出，所以不需要知道原模型输出的函数名或变量名，而且不使用大括号 同时存在命名式和默认式1import defaultName, &#123;otherName&#125; from 'url' 必须在模块的最高作用域imports或者exportES6的模块是静态结构，它的模块思想是尽量静态化，使得在编译时就能确定模块的依赖关系以及输入和输出的变量。所以不能在if语句后面export或者import东西，否则会报错，所以你必须在一个模块的最外层作用于使用export或者import。123456789if (Math.random()) &#123; import 'foo'; // SyntaxError&#125;// You can’t even nest `import` and `export`// inside a simple block:&#123; import 'foo'; // SyntaxError&#125; 如果你在{}内引用了import或者export，经测试,报错结果是”You can’t even nest import and export“ Overview of ES6 modules syntax code meaning code meaning export const ninja = “yoshi”; 命名式导出变量 import ninja from “ninja.js” 导入一个默认命名的变量 export function compare(){} 命名式导出函数 import {ninja, Ninja} from “ninja.js” 导入命名式导出的变量 export class Ninja{} 命名式导出类 import * as Ninja from “ninja.js” 导入模块中所有的命名式导出的变量 import {ninja as iNinja} from “ninja.js” 导入一个命名式变量并重新命名 export default class Ninja{} 默认导出类 import ninja, {otherNinja} from “ninja.js” 同时导入默认和命名式变量 export default function Ninja(){} 默认导出函数 export ninja = “yoshi”; function compare(){}; export {ninja, compare}; 导出存在的变量 export {ninja as samurai, compare} 利用as关键字给变量重新命名 模块输出方式CS6的模块加载机制和CommonJS模块完全不同。CommomJS模块输出的式一个值的拷贝，而ES6模块输入是export的动态只读视图（live read-only views）。这句话有点难以理解，反正就记住它是动态的引用，而且不可修改 CommonJS模块输入的是被输出值的拷贝如果你输入一个值赋给一个变量，这个值会拷贝两次：export一次(A)，import一次(B)。123456789//------ lib.js ------var counter = 3;function incCounter() &#123; counter++;&#125;module.exports = &#123; counter: counter, // (A) incCounter: incCounter,&#125;; 上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。 123456789101112//------ main1.js ------var counter = require('./lib').counter; // (B)var incCounter = require('./lib').incCounter;// The imported value is a (disconnected) copy of a copyconsole.log(counter); // 3incCounter();console.log(counter); // 3// The imported value can be changedcounter++;console.log(counter); // 4 上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。 小练习 12345678910111213141516171819// a.jsvar b = require('./b');console.log("0ms——我是a.js,我的foo="+b.foo);setTimeout(() =&gt; &#123; console.log("1000ms——我是a.js,我的foo="+b.foo); var b1 = require('./b') console.log("1000ms——我是a.js,当我再次require后,我的foo="+b.foo);&#125;, 1000);// b.jslet foo = 1;setTimeout(() =&gt; &#123; foo = 2; console.log("500ms——我是b.js,我还没有执行完，现在我的foo="+foo)&#125;, 500);module.exports = &#123; foo: foo,&#125;;console.log("0ms——我是b.js,我开始执行了，现在我的foo="+foo) 解答过程 ES6的输入是export的动态可读引用ES6的模块运行机制是：遇到import命令不会去执行模块，只会生成一个动态的只读引用(不能被修改)，等到真的需要了再到模块中取值。因此，他是动态引用并且不会缓存值，模块里面的变量绑定其所在的模块。这里说的引用该如何理解，个人认为可以参考下面的连接（有相似之处）： Explaining Value vs. Reference in Javascript JavaScript的值传递和引用传递 12345678910111213141516//------ lib.js ------export let counter = 3;export function incCounter() &#123; counter++;&#125;//------ main1.js ------import &#123; counter, incCounter &#125; from './lib';// The imported value `counter` is liveconsole.log(counter); // 3incCounter();console.log(counter); // 4// The imported value can’t be changedcounter++; // TypeError 由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。注意：尽管不能改变输入进来的值，但是可以改变他们所引用的对象。例如：12345678//------ lib.js ------export let obj = &#123;&#125;;//------ main.js ------import &#123; obj &#125; from './lib';obj.prop = 123; // OKobj = &#123;&#125;; // TypeError ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。 小练习 123456789101112// a.jsimport &#123;foo&#125; from './b.js'console.log(foo)setTimeout(() =&gt; &#123; console.log(foo)&#125;,1000)// b.jsexport var foo = 'bar'setTimeout(() =&gt; &#123; foo = 'baz'&#125;,500) 解答 循环依赖如果模块A引入了模块B而且B也引入了A，那么就称这两个模块互相循环依赖通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。 但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现a依赖b，b依赖c，c又依赖a这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。 对于 JavaScript 语言来说，目前最常见的两种模块格式 CommonJS 和 ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。 要搞清楚CommonJS 和 ES6怎么处理“循环加载”，就得先弄理解他们的加载原理和特性。之后根据这些特性可以推导出循环加载的过程。 模块特性ES6 模块跟 CommonJS 模块的不同，主要有以下两个方面： ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝 ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载 相同之处是： 模块不会重复执行 CommonJS加载原理CommonJS 的一个模块，就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。 123456&#123; id: '...', exports: &#123; ... &#125;, loaded: true, ...&#125; 上面代码就是 Node 内部加载模块后生成的一个对象。该对象的id属性是模块名，exports属性是模块输出的各个接口，loaded属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。 以后需要用到这个模块的时候，就会到exports属性上面取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。 CommonJS 模块的循环加载CommonJS 模块的重要特性是加载时执行，即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。 看一个来自node官方文档的例子。 123456// 脚本a.jsexports.done = false;var b = require('./b.js');console.log('在 a.js 之中，b.done = %j', b.done);exports.done = true;console.log('a.js 执行完毕'); 123456// 脚本b.jsexports.done = false;var a = require('./a.js');console.log('在 b.js 之中，a.done = %j', a.done);exports.done = true;console.log('b.js 执行完毕'); 1234// main.jsvar a = require('./a.js');var b = require('./b.js');console.log('在 main.js 之中, a.done=%j, b.done=%j', a.done, b.done); 有点绕，这里我列了一个表。 执行步骤 main.js a.js b.js 说明 1 var a = require(‘./a.js’); 出现reauire， 开始执行全部的a.js 2 exports.done = false; var b = require(‘./b.js’); a.js脚本先输出一个done变量， 然后加载另一个脚本文件b.js。 注意，此时a.js代码就停在这里， 等待b.js执行完毕，再往下执行。 3 exports.done = false; var a = require(‘./a.js’); b.js执行到第二行，require(‘./a.js’)，这时，b模块想引入a模块，因为 node 之前已经加载过 a 模块了，所以它不会再去重复执行 a 模块，而是直接去生成当前 a 模块吐出的 module.exports 对象。因为a.js还没有执行完，从exports属性只能取回已经执行的部分，而不是最后的值。这个值就是false。 4 console.log(‘在 b.js 之中，a.done = %j’, a.done); exports.done = true; console.log(‘b.js 执行完毕’); b.js接着往下执行，（a.done值为false）等到全部执行完毕，再把执行权交还给a.js。 5 console.log(‘在 a.js 之中，b.done = %j’, b.done); exports.done = true; console.log(‘a.js 执行完毕’); b已经执行完，且最后输出的值是true。 所以这时输出的b.done=true a也执行完毕，对外输出的值是true，接下来到main.js 6 var b = require(‘./b.js’); 因为模块不会重复执行。 main.js执行到第二行时，不会再次执行b.js，而是输出缓存的b.js的执行结果，即它的第四行。 7 console.log(‘在 main.js 之中, a.done=%j, b.done=%j’, a.done, b.done); a.done和b.done均为true 小练习执行a.js后的结果？ 123456789101112131415// a.jsconsole.log('a starting');exports.done = false;const b = require('./b');console.log('in a, b.done =', b.done);exports.done = true;console.log('a done');// b.jsconsole.log('b starting');exports.done = false;const a = require('./a');console.log('in b, a.done =', a.done);exports.done = true;console.log('b done'); 具体解答 从上面的执行过程中，我们可以看到，在 CommonJS 规范中，当遇到 require() 语句时，会执行 require 模块中的代码，并缓存执行的结果，当下次再次加载时不会重复执行，而是直接取缓存的结果。正因为此，出现循环依赖时才不会出现无限循环调用的情况。虽然这种模块加载机制可以避免出现循环依赖时报错的情况，但稍不注意就很可能使得代码并不是像我们想象的那样去执行。因此在写代码时还是需要仔细的规划，以保证循环模块的依赖能正确工作。 所以有什么办法可以出现循环依赖的时候避免自己出现混乱呢？一种解决方式便是将每个模块先写 exports 语法，再写 requre 语句，利用 CommonJS 的缓存机制，在 require() 其他模块之前先把自身要导出的内容导出，这样就能保证其他模块在使用时可以取到正确的值。比如： 123456789// a.jsexports.done = true;let b = require('./b');console.log(b.done)// b.jsexports.done = true;let a = require('./a');console.log(a.done) ES6加载原理 ES6 模块是动态引用，如果使用import从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用。 ES6 模块静态编译，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。 模块不会重复执行 关于静态编译，会导致以下两个特点 import 命令会被 JavaScript 引擎静态分析，优先于模块内的其他内容执行。 export 命令会有变量声明提前的效果。 import 优先执行: 从第一条来看，在文件中的任何位置引入 import 模块都会被提前到文件顶部。 1234567891011// a.jsconsole.log('a.js')import &#123; foo &#125; from './b';// b.jsexport let foo = 1;console.log('b.js 先执行');// 执行结果:// b.js 先执行// a.js 从执行结果我们可以很直观地看出，虽然 a 模块中 import 引入晚于 console.log(‘a’)，但是它被 JS 引擎通过静态分析，提到模块执行的最前面，优于模块中的其他部分的执行。 export 变量声明提升: 正常的引入模块是没办法看出变量声明提升的特性，需要通过循环依赖加载才能看出。 123456789101112131415// a.jsimport &#123; foo &#125; from './b';console.log('a.js');export const bar = 1;export const bar2 = () =&gt; &#123; console.log('bar2');&#125;export function bar3() &#123; console.log('bar3');&#125;// b.jsexport let foo = 1;import * as a from './a';console.log(a); 静态编译后的a模块的执行顺序： 12345678910111213141516// a.js// export声明变量，先把接口都暴露出去，只声明的变量还是undefinedexport const bar;export const bar2;// 函数的声明（边声明变赋值）export function bar3() &#123; console.log('bar3');&#125;// import会被提前import &#123; foo &#125; from './b';console.log('a.js');// 具体对变量的赋值还需要等到相应代码执行bar = 1;bar2 = () =&gt; &#123; console.log('bar2');&#125; 静态编译后的a模块的执行顺序： 1234567// b.js// export先声明变量export let foo；// import被提前import * as a from './a';export let foo = 1;console.log(a); 按照编译后的执行顺序，可以很简单地判断输出结果了： 123// 执行结果:// &#123; bar: undefined, bar2: undefined, bar3: [Function: bar3] &#125;// a.js 从上面的例子可以很直观地看出，a 模块引用了 b 模块，b 模块也引用了 a 模块，export 声明的变量也是优于模块其它内容的执行的，但是具体对变量赋值需要等到执行到相应代码的时候。(当然函数声明和表达式声明不一样，这一点跟 JS 函数性质一样，这里就不过多解释) 关于模块不会重复执行，ES6和commonJS是一样的当你重复引入某个相同的模块时，模块只会执行一次。 123456789// a.jsimport './b';import './b';// b.jsconsole.log('只会执行一次');// 执行结果：// 只会执行一次 ES6 模块的循环依赖熟悉了加载特性之后，再遇到循环依赖就很好理解了。 12345678910111213141516// a.jsconsole.log('a starting')import &#123;foo&#125; from './b';console.log('in b, foo:', foo);export const bar = 2;console.log('a done');// b.jsconsole.log('b starting');import &#123;bar&#125; from './a';export const foo = 'foo';console.log('in a, bar:', bar);setTimeout(() =&gt; &#123; console.log('in a, setTimeout bar:', bar);&#125;)console.log('b done'); a模块和b模块是循环依赖的，思考一下执行a模块的结果吧！具体解答 相关资料exploringjs 阮一峰 知乎–深入理解 ES6 模块机制]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>模块化</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未知宽高图片的水平垂直居中]]></title>
    <url>%2F2017%2F12%2F08%2F%E6%9C%AA%E7%9F%A5%E5%AE%BD%E9%AB%98%E5%9B%BE%E7%89%87%E7%9A%84%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[背景图片居中原理：使用一个透明的gif图片做覆盖层，高宽拉伸至所需要的大小，然后给这个gif图片一个background-position:center center的属性。而background-image建议写在页面上，因为实际项目中，这肯定是个动态的URL地址，css文件似乎不支持动态URL地址。 示例代码： 123456789101112131415161718192021222324252627282930&lt;html&gt; &lt;head&gt; &lt;style&gt;#box&#123; width:600px; height:600px; background: black; border:1px solid #d3d3d3;&#125;#box img &#123; background-repeat: no-repeat; background-position: center; background-attachment:fixed; width:100%; height:100%; border: 1px solid #d3d3d3;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="box"&gt; &lt;img src="img/pixel.png" alt="" style="background-image:url(img/panda.jpg);" /&gt; &lt;/div&gt; &lt;div id="box"&gt; &lt;img src="img/pixel.jif" alt="" style="background-image:url(img/Jackma.jpg);" /&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; pixel.gif和pixel.png都是300px*300px的透明图片。经过测试png和gif两种类型其实都可以，究竟哪种类型我觉得看需求，用png的话可以更好的支持半透明的效果。（个人观点）（注意这里一定得是透明的图片，因为它是覆盖在你要显示的图片上） 设置box的宽高都是600px，为了更好的显示加了一个背景颜色和边框。box底下的img给设了一个宽高100%，目的是把透明图片铺满box。 利用background-position中有个center属性。可以完美实现居中。别忘了background-repeat: no-repeat; background-position 属性设置背景图像的起始位置。 提示：需要把 background-attachment 属性设置为 “fixed”，才能保证该属性在 Firefox 和 Opera 中正常工作。 最终效果： 这样直接操作html中的url地址就可以不用考虑该图片的宽高实现水平垂直居中。 思考：12345678910/* 省略一部分 */#box div &#123; background-repeat: no-repeat; background-position: center ; width:100%; height:100%; border: 1px solid #d3d3d3;&#125;&lt;div style=&quot;background-image:url(img/panda.jpg);&quot; /&gt; 其实不用img搞一个透明图片覆盖也可以这样实现垂直水平居中的，用透明图层覆盖的话会便于维护一些。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[埃拉托斯特尼筛法]]></title>
    <url>%2F2017%2F11%2F26%2F%E5%85%B3%E4%BA%8E%E7%B4%A0%E6%95%B0%E7%9A%84%E5%9F%83%E6%B0%8F%E7%AD%9B%E6%B3%95%2F</url>
    <content type="text"><![CDATA[简称埃氏筛，是一种简单且年代久远的筛法，用来找出一定范围内所有的素数。所使用的原理是从2开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列。此为这个筛法和试除法不同的关键之处，后者是以素数来测试每个待测数能否被整除。 算式给出要筛数值的范围n，找出 {\displaystyle {\sqrt {n}}} \sqrt{n}以内的素数 {\displaystyle p{1},p{2},\dots ,p{k}} p1,p2,\dots ,p。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个素数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个素数5筛，把5留下，把5的倍数剔除掉；不断重复下去……。 步骤找出25以内的所有素数，详细列出算法如下： 列出2以后的所有序列：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 标出序列中的第一个质数，也就是2，序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 将剩下序列中，划摽2的倍数（粗体），序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25如果现在这个序列中最大数小于最后一个标出的素数的平方，那么剩下的序列中所有的数都是质数，否则回到第二步。 本例中，因为25大于2的平方，我们返回第二步： 剩下的序列中第一个质数是3，将主序列中3的倍数划出，主序列变成：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25我们得到的质数有：2，3 25仍然大于3的平方，所以我们还要返回第二步： 现在序列中第一个质数是5，同样将序列中5的倍数划出，主序列成了：2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25我们得到的质数有：2 3 5 。 因为25等于5的平方，跳出循环. 结论：去掉划出的数字，2到25之间的质数是：2 3 5 7 11 13 17 19 23。 图解 c++代码12345678910111213141516171819202122232425#include &lt;vector&gt;#include &lt;algorithm&gt;//std::remove_if#include &lt;numeric&gt;//std::iotastd::vector&lt;int&gt; eratosthenes(int max)&#123; std::vector&lt;int&gt; vi(max+1);//0, 1, 2, ..., max std::iota(vi.begin(), vi.end(), 0); if(max&gt;=2)&#123; int prime=2; while(prime*prime&lt;=max)&#123;//2 to sqrt(max) for(size_t index=prime*2; index&lt;vi.size(); index+=prime)&#123; vi[index]=0;//Rule out this number. &#125; for(prime++; prime*prime&lt;=max; prime++)&#123; if(vi[prime]&gt;0)&#123; break;//Jump to next non-zero. &#125; &#125; &#125; &#125; vi.erase(std::remove_if(vi.begin(), vi.end(), [](int i)-&gt;bool&#123; return i&lt;=1; &#125;), vi.end());//Remove all zeros and the one. return vi;&#125; 以上是来自维基百科的说法。 其实就是直接构造一个整型的数组，经过埃氏筛之后把合数置为0，对于一般占4个字节的int来说，每一个数不管素数还是合数都要占据4个字节的空间，但其实我是不需要合数的，当n很大的时候空间开销就会特别大。 另一种方法就是筛的时候遇到合数就将它删掉，这样最后数组内只剩下素数，看起来不错可以减少空间的开销，但是频繁地对一个大的容器进行删除操作可能会导致频繁的内存分配和释放，而频繁的内存分配/释放，会导致明显的 CPU 占用并可能造成内存碎片。 优化按布尔（bool）存储的思路。构造一个定长的布尔型容器（通常用数组）。比方说，质数的分布范围是1,000,000，那么就构造一个包含1,000,000个布尔值的数组。然后把所有元素都初始化为 true。在筛的过程中，一旦发现某个自然数是合数，就以该自然数为下标，把对应的布尔值改为 false。全部筛完之后，遍历数组，找到那些值为 true 的元素，把他们的下标打印出来即可。此种境界的好处在于：其一，由于容器是定长的，运算过程中避免了频繁的内存分配/释放；其二，在某些语言中，布尔型占用的空间比整型要小。比如 C++ 的 bool 仅用1字节 注：C++ 标准（ISO/IEC 14882）【没有】硬性规定 sizeof(bool)==1，但大多数编译器都实现为单字节。 继续优化按位（bit）存储的思路。以 C++ 为例。一个 bool 占用1字节内存。而1个字节有8个比特，每个比特可以表示0或1。所以，当你使用按位存储的方式，一个字节可以拿来当8个布尔型使用。所以，达到此境界的程序猿，会构造一个定长的 byte 数组，数组的每个 byte 存储8个布尔值。空间性能相比境界2，提高8倍（对于 C++ 而言）。如果某种语言使用4字节表示布尔型，那么境界3比境界2，空间利用率提高32倍。 当然，楼上的方法并不一定是最优的方法。欢迎各位挑刺。]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>素数</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据依赖之函数依赖和多值依赖]]></title>
    <url>%2F2017%2F10%2F23%2F%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96%2F</url>
    <content type="text"><![CDATA[数据依赖是一个关系内部属性与属性之间的一种约束关系。这种约束关系是通过属性间值的相等与否体现出来的数据间的相关联系。其中最重要的是函数依赖和多值依赖。 例1.函数依赖建立一个描述学校教务的数据库，该数据库涉及的对象包括学生的学号（Sno）、所在系（Sdept）、系主任姓名（Mname）、课程号（Cno）和成绩（Grade）。假设用一个单一的关系模式Student来表示，则该关系模式的属性集合为U={Sno,Sdept,Mname,Cno,Grade}现实世界的已知事实告诉我们：①一个系有若干学生，但一个学生只属于一个系。Sno-&gt;Sdept②一个系只有一名负责人。Sdept-&gt;Mname③一个学生可以选修多门课程，没门课程有若干学生选修。④每个学生学习每一门课程有一个成绩。{Sno,Cno}-&gt;Grade于是得到属性U上的椅子函数依赖F={Sno-&gt;Sdept,Sdept-&gt;Mname,{Sno,Cno}-&gt;Grade}。 但是这个关系模式存在以下问题：①数据冗余②更新异常③插入异常④删除异常 例二.完全函数依赖和部分函数依赖 U={Sno,Sdept,Mname,Cno,Grade} {Sno,Cno}-f-&gt;Grade是完全函数依赖。 {Sno,Cno}-p-&gt;Sdept是部分函数依赖，因为Sno-&gt;Sdept成立，而Sno是{Sno,Cno}的子集。 U =（员工码，姓名，出生日期，联系电话，学历，毕业学校，培训日期，培训内容） {员工码，培训日期}-f-&gt;U 是完全依赖函数 {员工码，培训日期}-p-&gt;{姓名，出生日期}是部分依赖函数，因为员工码-&gt;{姓名，出生日期}成立，而员工码是{姓名，出生日期}的子集 例三 传递函数依赖 U={Sno,Sdept,Mname,Cno,Grade} Sno-&gt;Sdept, Sdept-&gt;Mname成立，所以Sno-传递-&gt;Mname，系主任是传递依赖于学号的。还要加上条件Sdept-/-&gt;Sname,因为如果Sdept-&gt;Sname，则Sdept&lt;-&gt;Sname,实际上是Sno-直接-&gt;Mname，是直接函数依赖而不是传递函数依赖。 U={学号，姓名，年龄，班号，班长，课号，成绩} 学号-&gt;班号；班号-&gt;班长成立，又班号-/-&gt;学号，所以学号-传递-&gt;班长。 例四.2NF（第二范式）2NF：每一个非主属性完全依赖与候选码。有关系模式S-L-C(Sno，Sdept，Sloc，Cno，Ggrade)，其中Sloc为学生的住处，并且每个系的学生住在同一个地方。码为（Sno，Cno），则函数依赖有：（Sno，Cno）-P-&gt;Sdept, 因为Sno-&gt;Sdept，Sno是（Sno，Cno）的子集（Sno，Cno）-P-&gt;Sloc, 因为Sno-&gt;Sloc, Sno是（Sno，Cno）的子集（Sno，Cno）-F-&gt;Grade可以看到非主属性Sdept、Sloc并不完全依赖于码（Sno，Cno），因此关系模式S-L-C不符合2NF定义。一个关系模式R不属于2NF，会产生以下几个问题：①插入异常②修改异常③删除异常分析：上面的例子中，发现有两类非主属性，一类如Gdrade，它对码是完全函数依赖；另一类如Sdept、Sloc，他们对码是不完全依赖，解决的办法是用投影分解法把关系模式S-L-C分解为两个关系模式：SC(Sno，Cno，Ggrade)和SL(Sno，Sdept，Sloc)。 例五.3NF（第三范式）属于2NF的同时，每一个非主属性都不传递依赖于码在例四修改后的SL(Sno，Sdept，Sloc)中，由Sno-&gt;Sdept(Sdept-/-Sno),Sdept-&gt;Sloc可得，Sno-传递-&gt;Sloc,因此SL(Sno，Sdept，Sloc)不符合3NF。对SC(Sno，Cno，Ggrade)，非主属性是Ggrade，不传递依赖于码，所以符合3NF。 例六.BCNF通常认为BCNF是修正的第三范式，有时也称为扩充的第三范式：关系模式中，每一个决定因素都包含码。一个满足BCNF的关系模式有： 所有非主属性对每一个码都是完全函数依赖 所有主属性对每一个不包含他的码也是完全函数依赖 没有任何属性完全依赖于非码的任何一组属性 关系模式STJ(S,T,J)中，S表示学生，T表示教师，J表示课程。每一个教师只教一门课，每门课有若干教师，某学生选定某门课就对应一个固定的教师。由语义可得到如下的函数依赖。（S，J）-&gt;T , (S , T)-&gt;J , T-&gt;J因为候选码为（S，J） (S , T)，所以S J T都是主属性STJ是3NF，因为没有任何非主属性对码传递依赖或者部分依赖。但是STJ不是BCNF，因为T是决定因素但是不包含码，或者对主属性J来说，J对(S , T)是部分依赖，因为T-&gt;J，且T是 (S , T)的子集。 例七.多值依赖学校中某一门课由多个教师讲授，他们使用相同的一套参考书。每个教师可以讲授多门课程，每种参考书可以供多门课使用。关系模型Teaching（C，T，B）码是（C，T，B）即all-key，但是当某一个课程增加一名教师，必须插入多个元组，同样要删掉一本参考书，则必须删除多个元组，这样对数据的增删改很不方便，数据的冗余也很明显，发现他具有一种称为多值依赖的数据依赖，例如：在关系模式Teaching中，对于一个（物理，光学原理）有一组T值{李勇，王军}，这组值仅仅决定于课程C上的值（物理）。也就是说对于另一个（物理，普通物理学），它对应的一组仍是{王军，李勇}。因此T多值依赖于C，即C-&gt;-&gt;T。 又例如：关系模式WSC(W,S,C)中，W表示仓库，S表示保管员，C表示商品。假设每个仓库有若干保管员，有若干种商品。每个保管员保管所在仓库的所有商品，每种商品被所有保管员保管。按照语义，对于W的每一个值Wi，S有一个完整的集合与之对应而不问C取何值。所以W-&gt;-&gt;S。由于C与S具有完全对称性，必然有W-&gt;-&gt;C成立。 多值依赖的性质：1.具有对称性2.具有传递性3.函数依赖可以看作是多值依赖的特殊情况，这是因为当X-&gt;Y时，对X的每一个值x，Y都有一个确定的值y与之对应，所以X-&gt;-&gt;Y。 多值依赖和函数依赖相比有下面两个基本的区别：1.多值依赖的有效性与属性集的范围有关。2.若函数依赖X-&gt;Y在R(U)上成立，则对于任何Y’∈Y均有X-&gt;Y’成立。而多值依赖X-&gt;-&gt;Y若在R(U)上成立，却不能断言对于任何Y’∈Y有X-&gt;-&gt;Y’成立。 例八.4NF4NF就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。在前面的关系模式WSC(W,S,C)中，W-&gt;-&gt;S,W-&gt;-&gt;C，他们都是非平凡的多值依赖。W不是码，关系模式WSC(W,S,C)中的码是(W,S,C)，即all-key。因此WSC不满足4NF。 总结函数依赖和多值依赖是两种最重要的数据依赖，如果只考虑函数依赖，则属于BCNF的关系模式规范化程度已经是最高的了；如果考虑多值依赖，则属于4NF的关系模式规范化程度是最高的。事实上，除了函数依赖和多值依赖之外，还有其它数据依赖，例如连接依赖。函数依赖是多值依赖的一种特殊情况，而多值依赖又是连接依赖的一种特殊情况。]]></content>
      <categories>
        <category>数据库与后端</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>规范化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自测练习之深入理解对象(2)]]></title>
    <url>%2F2017%2F10%2F19%2F%E8%87%AA%E6%B5%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1_2%2F</url>
    <content type="text"><![CDATA[Object.prototype.toString方法JavaScript对象原型的关系是一种树形结构，整个树形结构的根部就是Object.prototype。Object.prototype提供了一些可以在所有对象中使用的方法。比如说，toString方法可以将一个对象转换成其字符串表示形式，即返回反映这个对象的字符串。自测练习4123function foo(obj)&#123; return Object.prototype.toString.call(obj).slice(8,-1)&#125;//请说明函数foo的作用 对obj这个对象调用Object.prototype.toString，返回对象obj的具体类型（一对方括号，方括号中间是单词“object”和类型的名称），再对返回的[object ….]调用slice方法，切去前面的object和最后的’]’剩下一个代表obj的类型名称的字符串。foo的作用：检测参数的对象类型，返回代表类型名的字符串。比如： 1234567foo("jerry"); //"String"foo(123); //"Number"foo(true); //"Boolean"foo([1,2,3]); //"Array"foo(&#123;&#125;); //"Object"foo(null); //"Null"foo(); //"Undefined" PS:obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样,这是因为toString为Object的原型方法，而Array ，function等类型作为Object的实例，都重写（覆盖）了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的覆盖之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串（与调用join(“,”)的结果非常相似，即在数组的每个值之间插入一个逗号）…..），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object上原型toString方法。 我们可以验证一下，将数组的toString方法删除，看看会是什么结果： 123456var arr=[1,2,3];console.log(Array.prototype.hasOwnProperty("toString"));//trueconsole.log(arr.toString());//1,2,3delete Array.prototype.toString;//delete操作符删除实例属性console.log(Array.prototype.hasOwnProperty("toString"));//falseconsole.log(arr.toString());//"[object Array]" 删除了Array的toString方法后，同样再采用arr.toString()方法调用时，不再有屏蔽Object原型方法的实例方法，因此沿着原型链，arr最后调用了Object的toString方法，返回了和Object.prototype.toString.call(arr)相同的结果。 Object.defineProperty 方法定义对象可以使用构造函数或字面量的形式： 123var obj = new Object; //obj = &#123;&#125;obj.name = "张三" //添加描述obj.say = function()&#123;&#125;://添加行为 除了以上添加属性的方法，还可以使用Object.defineProperty定义新属性或修改原有的属性。 语法： 1Object.defineProperty(obj, prop, descriptor) 参数说明： obj：必需。目标对象 prop：必需。需要定义或修改属性的名字 descriptor：必需。目标属性所拥有的特性返回值： 传入函数的对象。即第一个参数obj 数据描述当修改或定义对象的某个属性的时候，给这个属性添加一些特性： 1234567891011121314151617var obj = &#123; test:"hello"&#125;//对象已有的属性添加特性描述Object.defineProperty(obj,"test",&#123; configurable:true | false, enumerable:true | false, value:任意类型的值, writable:true | false&#125;);//对象新添加的属性的特性描述Object.defineProperty(obj,"newKey",&#123; configurable:true | false, enumerable:true | false, value:任意类型的值, writable:true | false&#125;); 数据描述中的属性都是可选的，来看一下设置每一个属性的作用。 value属性对应的值,可以使任意类型的值，默认为undefined writable属性的值是否可以被重写。设置为true可以被重写；设置为false。不能被重写，默认值为false。 enumerable此属性的值是否可以被枚举（使用for…in或Object.keys()）。设置为true可以被枚举；设置为false，不能被枚举。默认为false。 configurable是否可以删除目标属性或者是否可以再次修改属性的特性（writable,configurable,enumerable）。设置为true可以被删除或可以重新设置特性；设置为false，属性想再改过来都不行。 回到开头，第一种给对象添加属性的方法，添加的属性是可删除、可枚举、可重写的。 第二种使用Object.definePropety给对象添加属性，如果不设置属性的特性，那么默认情况下，添加的属性是不可删除、不可枚举、不可重写的。具体Object.defineProperty 方法参考 自测练习5 123456789101112131415161718192021222324var a = &#123;&#125;a.bar = 2Object.defineProperty(a, "foo", &#123; value: "hi"&#125;);//为a添加名为foo的属性，值为"hi",没有设置属性的特性，所以这个属性是不可枚举、修改和重写的console.log(delete a.foo)//foo属性不可以被删除，故删除失败，输出falseconsole.log(delete a.bar)//a属性是直接添加的，可以删除，输出truea.foo = "world"console.log(a.foo)//foo属性是不可重写的，值不变，还是输出"hi"for (var key in a)&#123; console.log(key);&#125;//foo属性不可枚举，bar属性又被删除了，没有可以枚举的属性了，不输出console.log("foo" in a);//foo虽然不可枚举，但是还是存在对象a之中的，输出trueconsole.log("bar" in a);//bar属性已经被删除，不在对象a之中，输出false//请问console.log的输出？]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自测练习之深入理解对象(1)]]></title>
    <url>%2F2017%2F10%2F18%2F%E8%87%AA%E6%B5%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1_1%2F</url>
    <content type="text"><![CDATA[构造函数和对象原型有一种创建对象的方法，我们可以直接从一些公有原型中派生并构造对象，即用构造函数来创建对象。在js中，调用函数之前添加一个关键字new则表示调用其构造函数。构造函数中包含了指向新对象的变量this。 自测练习112345678910111213var a = function()&#123;&#125;a.b = 1a.prototype.b = 2a.prototype.c = 3a.prototype.d = 4console.log(a.b) console.log(new a().b)var foo = new a()foo.c = 5console.log(foo.c) console.log(foo.d)//请问输出的是什么？ 对构造函数来说，都会自动获得一个名为prototype的属性。默认情况下，该属性是一个普通的派生自Object.prototype的空对象。所有使用特定构造函数创建的对象都会将构造函数的prototype属性作为其原型。所以最后输出结果是：1254 自测练习2 12345678910var Foo = function()&#123; this.a = 1 return &#123; a:2 &#125;&#125;var bar = new Foo()console.log(bar.a)//请问输出是什么？ 构造函数包含了指向新对象的变量this， 除非构造函数显式地返回了另一个对象的值，否则构造函数会返回这个新创建的对象。定义了Foo这个构造函数，这个构造函数很明显是返回的是另一个对象{a:2},不需要this来指向新创建的对象 不知道是不是这样理解？所以新创建的bar即为构造函数内部返回的对象{a:2}，输出的结果是2。 无原型对象我们可以使用Object.create函数并根据特定原型来创建对象，可以传递null作为原型，并创建一个无原型对象。自测练习3 1234567var map = Object.create(null);console.log("toString" in map); var map = Object.create(&#123;a:1&#125;);console.log("toString" in map); console.log("a" in map);//请问输出是什么？ 第一个map，这个对象就是一个无原型对象，map里面没有prototype原型，toString函数也就不在map里面了，输出false第二个map，这个对象有原型且原型是{a:1}，要找map的属性中有没有toString，没有，再去map的原型中去找，原型是{a:1}，也没有toString，再找原型的原型，即对象{a:1}的原型，这个对象的原型默认为Object.prototype，发现是存在的，故输出true 不知道解释的对不对；最后一个console.log只需找一个原型就找到了，也输出true。所以最后输出的结果为：falsetruetrue]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闭包]]></title>
    <url>%2F2017%2F10%2F16%2F%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[函数可以作为值使用，而且其局部变量会在每次函数调用时重新创建，由此引出一个值得我们探讨的问题：如果函数已经执行结束，那么这些有函数创建的局部变量会如何处理呢？下面的示例代码展示了这种情况。代码中定义了函数wrapValue，该函数创建了一个局部变量localVariable，并返回一个函数，用于访问并返回局部变量localVariable。 12345678910function wrapValue(n)&#123;truevar localVariable = n;truereturn function() &#123;return localVariable;&#125;;&#125;var wrap1 = wrapValue(1);var wrap2 = wrapValue(2);console.log(wrap1);//1console.log(wrap2);//2 这段代码印证了局部变量会在每次函数调用时重新创建，不同的函数调用是不会对其它函数内的局部变量产生任何影响的， 我们把这种引用特定的局部变量实例的功能称为闭包。一个包装了一些局部变量的函数是一个闭包。很多高级应用可以利用闭包的特性来实现。 我们可以把关键字function 当作一种“冻结”代码并将其打包成函数值的模型。所以当你看到“return function(…){…}”这样的代码时，你可以将其理解为一个句柄，其中句柄指向一段包装好的计算代码。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[顺序栈的基本操作]]></title>
    <url>%2F2017%2F10%2F12%2F%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[由于顺序栈的操作位置基本在栈底，所以，不需要查找插入和删除的位置，也不需要移动元素，因而顺序栈的基本操作要比顺序表简单的多，其基本操作时间复杂度均为O（1）。下面给出顺序栈的部分操作的实现。 （1）初始化操作。顺序栈的初始化就是构造一个空的顺序栈S，初始分配的最大容量为maxsize，预设的需要扩容的增量为incresize。其主要操作是：申请存储控件，栈顶指针的初始值置为-1. 12345678 void InitStack_Sq(SqStack &amp;S, int maxsize=STACK_INIT_SIZE, int incresize=STACKINCREMENT)&#123;trueS.stack=(ElemType *)malloc(maxsize*sizeof(ElemType)); true //顺序栈的初始分配最大空间trueif(!S.stack) exit(1); //存储控件分配失败trueS.top = -1; //置栈空trueS.stacksize = maSxsize; //顺序栈的当前容量trueS.incrementsize = incresize; //增补空间&#125;//InitStack_Sq (2)求顺序栈的长度操作。统计顺序栈S中数据元素的个数，并返回统计结果。其主要操作是：返回顺序栈中栈顶指针的上一个位置。 123int StackLength_Sq(SqStack S)&#123;truereturn S.top+1;&#125;//StackLength_Sq (3)进栈操作。将一个新元素插入到顺序栈S的栈顶的上一个位置，作为新的栈顶元素。其主要操作是：先判断顺序栈是否已满，若已满，则重新分配空间，然后将栈顶指针加1，再将进栈元素插入到栈顶处。 12345678910111213bool Push_Sq(SqStack &amp;S, ElemType e)&#123;//在顺序栈的栈顶插入元素eif(S.top==S.stacksize-1)&#123;trueS.stack=(ElemType *)realloc(S.stack,(S.stacksize+incrementsize)*sizeof(ElemType));true//栈满，给顺序栈增补空间trueif(!S.stack) return false;true//存储分配空间失败trueS.stacksize+=S.incrementsize;&#125;S.stack[++top]=e;true//栈顶指针上移，元素e进栈return true;&#125;//Push_Sq (4)出栈操作。将元素S的栈顶元素删除。其主要操作是：先判断栈顶指针书否为空，若非空，则将栈顶元素取出，然后将栈顶指针减1. 123456bool Pop_Sq(SqStack &amp;S, ElemType &amp;e)&#123;//删除顺序栈栈顶元素，并让e返回其值if(S.top==-1) return false;e = S.stack[S.top--];truereturn false;&#125;//Pop_Sq (5)取栈顶操作。取出顺序栈S的栈顶元素的值。其主要操作是：先判断顺序栈是否为空，若非空，则将栈顶元素取出。 123456bool GetTop_Sq(SqStack S,ElemType e)&#123;//取顺序栈顶元素，并让e返回其值if(S.top==-1) return false;e=S.stack[S.top];return true;&#125;//GetTop_Sq (6)判断栈空操作。判断顺序栈S是否为空。若S为空则返回true，否则返回false。 123456bool StackEmpty_Sq(SqStack S)&#123;if(S.top==-1) return true;return false;&#125;``` (7)撤销顺序栈操作。释放顺序栈S所占用的存储空间。 void DestroyStack_Sq(SqStack &amp;S){ free(S.stack); S.stacksize = 0; S.top = -1;}//DestroyStack_Sq ```总结 对于顺序栈S的相关操作，归纳起来主要有以下4个要素。 栈空条件：S.top == -1 栈满操作：S.top == S.stacksize-1 进栈操作：S.top++; 元素进栈 出栈操作：元素退栈，S.top–]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>堆栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态存储分配（堆分配）的顺序串与顺序表在操作上的异同]]></title>
    <url>%2F2017%2F10%2F11%2F%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%88%86%E9%85%8D%EF%BC%88%E5%A0%86%E5%88%86%E9%85%8D%EF%BC%89%E7%9A%84%E9%A1%BA%E5%BA%8F%E4%B8%B2%E4%B8%8E%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%9C%A8%E6%93%8D%E4%BD%9C%E4%B8%8A%E7%9A%84%E5%BC%82%E5%90%8C%20%2F</url>
    <content type="text"><![CDATA[串（string）（或字符串）是由零个或多个字符组成的有限序列，一般记为 s=‘a1a2...an’ (n&gt;=0) 串的数据元素固定为字符型的线性表，因此串的逻辑结构和线性表极为相似，只不过对串的操作常常是以”串的整体”或“子串”作为操作对象，而线性表的操作大多以“单个数据元素”为操作对象。 静态存储分配的顺序串（定长） 类似于线性表的顺序存储结构，用一组地址连续的存储单元存储串值的字符序列。在串的定长顺序存储结构中，按照预定义的大小，为每个定义的串变量分配一个固定长度 的存储区，则可以用定长数组如下描述。 1234567891011121314151617181920212223``` 串的实际长度在这预定义长度范围内随意，超过预定义长度的串值则被舍去，称之为“截断”。在这种存储结构表示如何实现串的操作，下面以串连接和求子串为例讨论。**串连接** Concat（&amp;T,S1,S2）假设S1、S2和T都是SSstring型的串变量，且串T是由串S1联结串S2得到的，则只要进行串的复制操作即可，只是需要对超长部分实施“截断”操作。基于串S1和S2长度的不同情况，串T值的产生可能有如下3种情况：（1）S1[0]+S2[0]&lt;=MAXSRETRLEN,得到的串T是正确的结果；（2）S1[0]&lt; MAXSRETRLEN而S1[0]+S2[0]&gt;MAXSRETRLEN,则将串S2的一部分截断，得到的串T只包含S2的一个子串；（1）S1[0]=MAXSRETRLEN,得到的串T并非联接结果，而和串S1相等。**求子串** SubString（&amp;Sub，S，pos。len）求子串的过程即为复制字符序列的过程，将串S中从第pos个字符开始长度为len的字符序列复制到串Sub中。``` CStatus SubString(SString &amp;Sub, SString S, int pos, int len)&#123;true//用Sub返回串S的第pos个字符起长度为len的子串true//其中，1&lt;=pos&lt;=StrLength(S)且0&lt;=len&lt;=StrLength(S)-pos+1trueif(pos&lt;1||pos&gt;S[0]||len&lt;0||len&gt;[0]-pos+1)truetruereturn ERROR;trueSub[1...len] = S[pos..pos+len-1]; //循环语句一个一个赋值trueSub[0] = len; return OK; //S串的长度置为len&#125;//Substring 综上两个操作可知，在顺序存储结构中，实现串操作的原操作为“字符序列的复制”，操作时间复杂度基于字符序列的长度。串连接的特点是，如果在操作中出现串值序列的长度超过MAXSTRLEN时，约定用截尾法处理，这种情况不仅在串联接时发生，在串的其它操作中，如插入、置换等也可能发生。克服这个弊病唯有不限定串长的最大长度，即动态分配串值的存储空间。 ###动态存储分配的顺序串（堆分配存储表示）由于多数情况下串的操作是以串的整体或子串的形式参与，则在应用程序中，参与运算的串变量之间的长度相差较大，因此为串变量设定固定大小空间的数组不尽合理，需要根据具体情况来决定串空间的大小。 动态存储分配的顺序串完全可以用动态存储分配的顺序表SqList来表示，这样的顺序表的有关操作都可以用来处理顺序串的相关操作，如初始化、求串长等。利用malloc()函数为每个新产生的串分配一块实际串所需的存储空间，若分配成功，则返回一个指向起始地址的指针，作为串的地址。这样，当进行串的插入、连接等操作时，再根据实际需要的增补空间，以满足插入和连接等操作的需要。所以在描述动态顺序串时，当前数组的容量和增补空间不再作为结构的一部分，其结构的描述如下： 1234typedef struct&#123;truechar *str; //存放空串的首地址trueint length; //存放串的当前长度&#125;DSqString //动态顺序串类型 由于动态存储分配的顺序串既具有顺序存储结构的优点（随机存取，操作简单），同时串值空间的大小是在程序执行时动态分配而得，这对串的插入、连接、置换等操作非常有利，因此在串处理的应用程序中也常被选用。 这种存储结构表示的串操作仍是基于“字符序列的复制”进行的。1.串赋值操作串赋值操作就是把一个字符串常量赋值给顺序串S。成功赋值返回true，否则返回false。其主要操作是：①判断顺序串是否非空，若是，则释放其空间（尽管这样做也不影响操作的执行结果，但适时地进行空闲空间回收是一个好的编程习惯）；②求串常量的长度，若等于0，就将顺序串S置空，否则，以此长度为标准为顺序串S申请空间；③把串常量chars的值复制到串S中去，同时顺序串S的长度被赋值为串常量的长度。 123456789101112131415bool StrAssign_Sq(DSqString &amp;S, char *chars)&#123;true//将字符串chars赋值给顺序串Strueint i,j;truechar *c;truefor(i=0,c=chars;*c;i++,c++); //求chars的长度trueif(!i)&#123;S.str=NULL;S.length=0;&#125; //S置为空串trueelse&#123;truetrueif(!(S.str=(char *)malloc(i*sizeof(char)))) //给串S申请空间truetruetruereturn false;truetruefor(j=0;j&lt;i;j++)truetruetrueS.str[j]=chars[j]; //将数组中的字符赋值到串S中truetrueS。length=i; //串长置为itrue&#125;truereturn true;&#125;//StrAssign_Sq 又例如串复制操作StrCopy_Sq(&amp;T, S)的算法实现是，若串T已存在，则先释放T所占的空间，当S不空时，首先为T分配大小和S长度相等的存储空间，然后将串S复制到串T中；又如串插入操作（连接）操作StrConcat_Sq(&amp;S,T),首先判断T的长度是否为非0，若是，则为S分配长度为T.length的增补空间，然后将T中的所有字符复制在S的后面。 关于动态顺序串的主要操作与在顺序表中进行的相关操作的算法思想基本上是一致的，不同之处在于：①因为动态顺序串的存储空间分配是以串的实际长度为标准的，所以在有些操作（如插入、连接等）中首先需要根据实际情况增补存储空间；②在顺序串的操作中经常是针对串的整体（如串赋值）或串的一部分子串而进行的，这样的操作相对于顺序表要复杂一些。以串插入操作为例，首先需要增补存储空间以便能够存放插入后的串，其次是要把从插入位置pos到串末尾的每一个字符串向后移动T.length个位置（而不是顺序表的一个位置），最后再把子串中的每一个字符（而不是顺序表的一个字符）复制到主串的相应位置。所以他的时间开销相比顺序表的插入要多一些，其它操作类似。]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆栈的顺序存储---顺序栈]]></title>
    <url>%2F2017%2F10%2F10%2F%E9%A1%BA%E5%BA%8F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[堆栈的顺序存储结构简称顺序栈，它是利用一组地址连续的存储单元依次存放自栈底到栈顶之间的元素。 顺序栈本质是顺序表的简化，唯一需要确定的是用顺序表的那一段表示栈底。通常把顺序表的表头（数组中下标为0）的一端作为栈底，同时附设指针top指示的栈顶元素在顺序表中的位置，top也被成为栈顶指针。 由于顺序表都是在栈顶的位置进行相关操作，因而栈顶指针top的当前位置是非常重要的。在对顺序表进行初始化时，栈顶指针top的初值习惯置为0，表示空栈（不含数据元素的栈），但因为C/C++中，数组的下标从0开始，因此top值为0时表示空栈，则意味着栈顶指针指向的是实际上的栈顶元素的上一个位置。因而，对用C/C++描述的顺序栈一般以top=-1表示空栈，这样，进栈操作时，先使top增1，用以表示新的栈顶位置，然后再把元素插入到top所指示的位置上；而出栈时则是先去除栈顶元素，再使top减1，top指针只想新的元素。这样的操作的结果就是栈顶指针指向真正的栈顶元素。 当然，用top=0和top=-1表示空栈，都是可以的，只要实际的操作与此配套就行 注意：*在顺序栈中，top起到指示栈顶元素的作用，他的值可以表示数组的下标，因此，top是一个相对指针* 在对顺序栈进行操作时可能发生两种溢出，一种称为“上溢”（overflow），另一种成为“下溢”（underflow），设存储栈元素的数组长度为stacksize，则 （1）当top&gt;=stacksize-1时，表示系统作为栈用的存储控件已满。如果还有元素要求进栈，则栈溢出，即上溢，这时需要进行栈满处理。如果是用静态顺序存储结构表示顺序栈，一旦发生上溢，程序将终止运行。并向用户告知栈满信息；而如果采用动态顺序存储结构表示顺序栈，一旦发生上溢，可向系统重新申请空间以满足插入要求。 （2）当top=-1时，表示系统作为栈用的存储区已空，栈中无任何元素。这时若还要做出栈运算，则发生下溢。通常用栈空来作为控制转移的条件俺，表明数据已处理完毕。 一般来说，在对顺序栈进行插入元素之前，要判断栈是否“栈满”，而对顺序栈进行删除元素之前，要判断栈是否“栈空”。 顺序栈的结构描述： 用C/C++描述顺序栈时，可以用顺序表的结构描述，只不过在顺序栈中，习惯用标识符top表示栈顶，而不用标识符length。 12345678#define STACK_INIT_SIZE 100 //顺序栈（默认的）的初始分配最大容量#define STACKINCREMENT //（默认的）增补控件 typedef struct&#123;trueElemType *stack; //存储数据元素的一维数组trueint top; //栈顶指针trueint stacksize; //当前分配的数组容量trueint incrementsize; //增补空间量（以ElemType为单位）&#125;SqStack;//顺序栈 这里对比一下顺序表的结构描述 123456typedef struct&#123; trueElemType *elem; //存储数据元素的一维数组trueint length; //线性表的当前长度trueint listsize; //当前分配的数组容量trueint incrementsize; //增补空间量（以ElemType为单位）&#125;SqList;//顺序表的动态分配 两个结构的描述经过对比，区别一清二楚]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>堆栈</tag>
      </tags>
  </entry>
</search>
